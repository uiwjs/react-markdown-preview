{"version":3,"file":"static/js/501.bd998f6c.chunk.js","mappings":"6JAoDA,QALA,SAAaA,EAAYC,GAEvB,QADWC,EAAAA,EAAAA,GAAQF,GAAcG,EAAAA,EAAWC,EAAAA,GAChCJ,GAAYK,EAAAA,EAAAA,GAAaJ,EAAU,GACjD,C,kCCjDA,IAAIK,EAAaC,KAAKC,KAClBC,EAAYF,KAAKG,IAyBrB,QAZA,SAAmBC,EAAOC,EAAKC,EAAMC,GAKnC,IAJA,IAAIC,GAAS,EACTC,EAASP,EAAUH,GAAYM,EAAMD,IAAUE,GAAQ,IAAK,GAC5DI,EAASC,MAAMF,GAEZA,KACLC,EAAOH,EAAYE,IAAWD,GAASJ,EACvCA,GAASE,EAEX,OAAOI,CACT,E,wBCoBA,QClCA,SAAqBH,GACnB,OAAO,SAASH,EAAOC,EAAKC,GAa1B,OAZIA,GAAuB,iBAARA,IAAoBM,EAAAA,EAAAA,GAAeR,EAAOC,EAAKC,KAChED,EAAMC,OAAOO,GAGfT,GAAQU,EAAAA,EAAAA,GAASV,QACLS,IAARR,GACFA,EAAMD,EACNA,EAAQ,GAERC,GAAMS,EAAAA,EAAAA,GAAST,GAEjBC,OAAgBO,IAATP,EAAsBF,EAAQC,EAAM,GAAK,GAAKS,EAAAA,EAAAA,GAASR,GACvDS,EAAUX,EAAOC,EAAKC,EAAMC,EACrC,CACF,CDgBYS,E,kGEOZ,QAlCA,SAAiBC,EAAQC,EAAMC,EAAOC,GACpC,KAAKC,EAAAA,EAAAA,GAASJ,GACZ,OAAOA,EAST,IALA,IAAIT,GAAS,EACTC,GAHJS,GAAOI,EAAAA,EAAAA,GAASJ,EAAMD,IAGJR,OACdc,EAAYd,EAAS,EACrBe,EAASP,EAEI,MAAVO,KAAoBhB,EAAQC,GAAQ,CACzC,IAAIgB,GAAMC,EAAAA,EAAAA,GAAMR,EAAKV,IACjBmB,EAAWR,EAEf,GAAY,cAARM,GAA+B,gBAARA,GAAiC,cAARA,EAClD,OAAOR,EAGT,GAAIT,GAASe,EAAW,CACtB,IAAIK,EAAWJ,EAAOC,QAELZ,KADjBc,EAAWP,EAAaA,EAAWQ,EAAUH,EAAKD,QAAUX,KAE1Dc,GAAWN,EAAAA,EAAAA,GAASO,GAChBA,GACCC,EAAAA,EAAAA,GAAQX,EAAKV,EAAQ,IAAM,GAAK,CAAC,EAE1C,EACAsB,EAAAA,EAAAA,GAAYN,EAAQC,EAAKE,GACzBH,EAASA,EAAOC,EAClB,CACA,OAAOR,CACT,ECnBA,QAhBA,SAAoBA,EAAQc,EAAOC,GAKjC,IAJA,IAAIxB,GAAS,EACTC,EAASsB,EAAMtB,OACfC,EAAS,CAAC,IAELF,EAAQC,GAAQ,CACvB,IAAIS,EAAOa,EAAMvB,GACbW,GAAQc,EAAAA,EAAAA,GAAQhB,EAAQC,GAExBc,EAAUb,EAAOD,IACnBgB,EAAQxB,GAAQY,EAAAA,EAAAA,GAASJ,EAAMD,GAASE,EAE5C,CACA,OAAOT,CACT,E,aCTA,QANA,SAAkBO,EAAQc,GACxB,OAAOI,EAAWlB,EAAQc,EAAO,SAASZ,EAAOD,GAC/C,OAAOkB,EAAAA,EAAAA,GAAMnB,EAAQC,EACvB,EACF,E,kCCQA,QCbA,SAAkBmB,GAChB,OAAOC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,GAASF,OAAMxB,EAAW2B,EAAAA,GAAUH,EAAO,GAChE,CDOWI,CAAS,SAASxB,EAAQc,GACnC,OAAiB,MAAVd,EAAiB,CAAC,EAAIyB,EAASzB,EAAQc,EAChD,E,yDEDA,QAVA,SAAiBtC,EAAYC,GAC3B,IAAIc,GAAS,EACTE,GAASiC,EAAAA,EAAAA,GAAYlD,GAAckB,MAAMlB,EAAWgB,QAAU,GAKlE,OAHAmC,EAAAA,EAAAA,GAASnD,EAAY,SAAS0B,EAAOM,EAAKhC,GACxCiB,IAASF,GAASd,EAASyB,EAAOM,EAAKhC,EACzC,GACOiB,CACT,C,gDChBImC,EAAY,EAwBhB,QALA,SAAkBC,GAChB,IAAIC,IAAOF,EACX,OAAOG,EAAAA,EAAAA,GAASF,GAAUC,CAC5B,C,gDCJA,QALA,SAAiBE,GAEf,OADsB,MAATA,EAAgB,EAAIA,EAAMxC,SACvByC,EAAAA,EAAAA,GAAYD,EAAO,GAAK,EAC1C,C,6ECbIE,EAAcC,OAAOC,UAGrBC,EAAiBH,EAAYG,eAsDjC,SA/BeC,EAAAA,EAAAA,GAAS,SAAStC,EAAQuC,GACvCvC,EAASmC,OAAOnC,GAEhB,IAAIT,GAAS,EACTC,EAAS+C,EAAQ/C,OACjBgD,EAAQhD,EAAS,EAAI+C,EAAQ,QAAK3C,EAMtC,IAJI4C,IAAS7C,EAAAA,EAAAA,GAAe4C,EAAQ,GAAIA,EAAQ,GAAIC,KAClDhD,EAAS,KAGFD,EAAQC,GAMf,IALA,IAAIiD,EAASF,EAAQhD,GACjBmD,GAAQC,EAAAA,EAAAA,GAAOF,GACfG,GAAc,EACdC,EAAcH,EAAMlD,SAEfoD,EAAaC,GAAa,CACjC,IAAIrC,EAAMkC,EAAME,GACZ1C,EAAQF,EAAOQ,SAELZ,IAAVM,IACC4C,EAAAA,EAAAA,GAAG5C,EAAOgC,EAAY1B,MAAU6B,EAAeU,KAAK/C,EAAQQ,MAC/DR,EAAOQ,GAAOiC,EAAOjC,GAEzB,CAGF,OAAOR,CACT,E,sHCtDA,MAAMgD,EACJC,WAAAA,GACE,IAAIC,EAAW,CAAC,EAChBA,EAASC,MAAQD,EAASE,MAAQF,EAClCG,KAAKC,UAAYJ,CACnB,CACAK,OAAAA,GACE,IAAIL,EAAWG,KAAKC,UAChBE,EAAQN,EAASE,MACrB,GAAII,IAAUN,EAEZ,OADAO,EAAOD,GACAA,CAEX,CACAE,OAAAA,CAAQF,GACN,IAAIN,EAAWG,KAAKC,UAChBE,EAAMJ,OAASI,EAAML,OACvBM,EAAOD,GAETA,EAAML,MAAQD,EAASC,MACvBD,EAASC,MAAMC,MAAQI,EACvBN,EAASC,MAAQK,EACjBA,EAAMJ,MAAQF,CAChB,CACAnB,QAAAA,GAIE,IAHA,IAAI4B,EAAO,GACPT,EAAWG,KAAKC,UAChBM,EAAOV,EAASE,MACbQ,IAASV,GACdS,EAAKE,KAAKC,KAAKC,UAAUH,EAAMI,IAC/BJ,EAAOA,EAAKR,MAEd,MAAO,IAAMO,EAAKM,KAAK,MAAQ,GACjC,EAGF,SAASR,EAAOD,GACdA,EAAMJ,MAAMD,MAAQK,EAAML,MAC1BK,EAAML,MAAMC,MAAQI,EAAMJ,aACnBI,EAAML,aACNK,EAAMJ,KACf,CAEA,SAASY,EAAeE,EAAGC,GACzB,GAAU,UAAND,GAAuB,UAANA,EACnB,OAAOC,CAEX,CCzCA,IAAIC,EAAoBC,EAAAA,EAAW,GAEnC,SAASC,EAAUC,EAAGC,GACpB,GAAID,EAAEE,aAAe,EACnB,MAAO,GAET,IAAIC,EAkEN,SAAoBH,EAAGC,GACrB,IAAIG,EAAW,IAAIC,EAAAA,EACfC,EAAQ,EACRC,EAAS,EAEbT,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7BQ,EAASK,QAAQb,EAAG,CAAEA,EAAGA,EAAGc,GAAI,EAAGC,IAAK,GAC1C,GAIAb,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIC,EAAaV,EAASW,KAAKF,EAAEjB,EAAGiB,EAAEG,IAAM,EACxCC,EAAShB,EAASY,GAClBK,EAAaJ,EAAaG,EAC9Bb,EAASe,QAAQN,EAAEjB,EAAGiB,EAAEG,EAAGE,GAC3BX,EAAS/F,KAAKG,IAAI4F,EAASH,EAASgB,KAAKP,EAAEjB,GAAGe,KAAOM,GACrDX,EAAQ9F,KAAKG,IAAI2F,EAAQF,EAASgB,KAAKP,EAAEG,GAAO,IAAKC,EACvD,GAEA,IAAII,EAAUvB,EAAAA,EAAQS,EAASD,EAAQ,GAAGgB,IAAI,WAC5C,OAAO,IAAI7C,CACb,GACI8C,EAAUjB,EAAQ,EAMtB,OAJAR,EAAAA,EAAUM,EAASI,QAAS,SAAUZ,GACpC4B,EAAaH,EAASE,EAASnB,EAASgB,KAAKxB,GAC/C,GAEO,CAAE6B,MAAOrB,EAAUiB,QAASA,EAASE,QAASA,EACvD,CAhGcG,CAAW1B,EAAGC,GAAYJ,GAClC8B,EAUN,SAAqB3B,EAAGqB,EAASE,GAC/B,IAIItC,EAJA0C,EAAU,GACV3D,EAAUqD,EAAQA,EAAQpG,OAAS,GACnC2G,EAAQP,EAAQ,GAGpB,KAAOrB,EAAEE,aAAa,CACpB,KAAQjB,EAAQ2C,EAAM5C,WACpB6C,EAAW7B,EAAGqB,EAASE,EAAStC,GAElC,KAAQA,EAAQjB,EAAQgB,WACtB6C,EAAW7B,EAAGqB,EAASE,EAAStC,GAElC,GAAIe,EAAEE,YACJ,IAAK,IAAI4B,EAAIT,EAAQpG,OAAS,EAAG6G,EAAI,IAAKA,EAExC,GADA7C,EAAQoC,EAAQS,GAAG9C,UACR,CACT2C,EAAUA,EAAQI,OAAOF,EAAW7B,EAAGqB,EAASE,EAAStC,GAAO,IAChE,KACF,CAGN,CAEA,OAAO0C,CACT,CAnCgBK,CAAY7B,EAAMsB,MAAOtB,EAAMkB,QAASlB,EAAMoB,SAG5D,OAAOzB,EAAAA,EACLA,EAAAA,EAAM6B,EAAS,SAAUd,GACvB,OAAOb,EAAEiC,SAASpB,EAAEjB,EAAGiB,EAAEG,EAC3B,GAEJ,CA6BA,SAASa,EAAW7B,EAAGqB,EAASE,EAAStC,EAAOiD,GAC9C,IAAIP,EAAUO,EAAsB,QAAK7G,EAwBzC,OAtBAyE,EAAAA,EAAUE,EAAEmC,QAAQlD,EAAMW,GAAI,SAAUmB,GACtC,IAAIE,EAASjB,EAAEe,KAAKA,GAChBqB,EAASpC,EAAEoB,KAAKL,EAAKnB,GAErBsC,GACFP,EAAQrC,KAAK,CAAEM,EAAGmB,EAAKnB,EAAGoB,EAAGD,EAAKC,IAGpCoB,EAAOzB,KAAOM,EACdO,EAAaH,EAASE,EAASa,EACjC,GAEAtC,EAAAA,EAAUE,EAAEiC,SAAShD,EAAMW,GAAI,SAAUmB,GACvC,IAAIE,EAASjB,EAAEe,KAAKA,GAChBC,EAAID,EAAKC,EACTqB,EAASrC,EAAEoB,KAAKJ,GACpBqB,EAAW,IAAKpB,EAChBO,EAAaH,EAASE,EAASc,EACjC,GAEArC,EAAE6B,WAAW5C,EAAMW,GAEZ+B,CACT,CAkCA,SAASH,EAAaH,EAASE,EAAStC,GACjCA,EAAM0B,IAEC1B,EAAU,GAGpBoC,EAAQpC,EAAM0B,IAAM1B,EAAU,GAAIsC,GAASpC,QAAQF,GAFnDoC,EAAQA,EAAQpG,OAAS,GAAGkE,QAAQF,GAFpCoC,EAAQ,GAAGlC,QAAQF,EAMvB,CCxHA,SAASqD,EAAItC,GACX,IAAIuC,EAA8B,WAAxBvC,EAAEyB,QAAQe,UAAyBzC,EAAUC,EASvD,SAAkBA,GAChB,OAAO,SAAUa,GACf,OAAOb,EAAEe,KAAKF,GAAGI,MACnB,CACF,CAb0DhB,CAASD,IAgBrE,SAAgBA,GACd,IAAIuC,EAAM,GACNE,EAAQ,CAAC,EACTC,EAAU,CAAC,EAEf,SAASC,EAAI/C,GACPE,EAAAA,EAAM4C,EAAS9C,KAGnB8C,EAAQ9C,IAAK,EACb6C,EAAM7C,IAAK,EACXE,EAAAA,EAAUE,EAAEiC,SAASrC,GAAI,SAAUiB,GAC7Bf,EAAAA,EAAM2C,EAAO5B,EAAEG,GACjBuB,EAAIjD,KAAKuB,GAET8B,EAAI9B,EAAEG,EAEV,UACOyB,EAAM7C,GACf,CAGA,OADAE,EAAAA,EAAUE,EAAEQ,QAASmC,GACdJ,CACT,CAvC2EK,CAAO5C,GAChFF,EAAAA,EAAUyC,EAAK,SAAU1B,GACvB,IAAIgC,EAAQ7C,EAAEe,KAAKF,GACnBb,EAAE8C,WAAWjC,GACbgC,EAAME,YAAclC,EAAEmC,KACtBH,EAAMI,UAAW,EACjBjD,EAAEmB,QAAQN,EAAEG,EAAGH,EAAEjB,EAAGiD,EAAO/C,EAAAA,EAAW,OACxC,EAOF,C,4CCWA,QAnBA,SAAsBrC,EAAOvD,EAAUgJ,GAIrC,IAHA,IAAIlI,GAAS,EACTC,EAASwC,EAAMxC,SAEVD,EAAQC,GAAQ,CACvB,IAAIU,EAAQ8B,EAAMzC,GACdmI,EAAUjJ,EAASyB,GAEvB,GAAe,MAAXwH,SAAiC9H,IAAb+H,EACfD,IAAYA,KAAYE,EAAAA,EAAAA,GAASF,GAClCD,EAAWC,EAASC,IAE1B,IAAIA,EAAWD,EACXjI,EAASS,CAEjB,CACA,OAAOT,CACT,EChBA,QAJA,SAAgBS,EAAO2H,GACrB,OAAO3H,EAAQ2H,CACjB,E,aCiBA,QANA,SAAa7F,GACX,OAAQA,GAASA,EAAMxC,OACnBsI,EAAa9F,EAAO+F,EAAAA,EAAUC,QAC9BpI,CACN,ECPA,QALA,SAAcoC,GACZ,IAAIxC,EAAkB,MAATwC,EAAgB,EAAIA,EAAMxC,OACvC,OAAOA,EAASwC,EAAMxC,EAAS,QAAKI,CACtC,E,kCCyBA,QAVA,SAAmBI,EAAQvB,GACzB,IAAIgB,EAAS,CAAC,EAMd,OALAhB,GAAWI,EAAAA,EAAAA,GAAaJ,EAAU,IAElCwJ,EAAAA,EAAAA,GAAWjI,EAAQ,SAASE,EAAOM,EAAKR,IACtCkI,EAAAA,EAAAA,GAAgBzI,EAAQe,EAAK/B,EAASyB,EAAOM,EAAKR,GACpD,GACOP,CACT,E,cC3BA,QAJA,SAAgBS,EAAO2H,GACrB,OAAO3H,EAAQ2H,CACjB,ECiBA,QANA,SAAa7F,GACX,OAAQA,GAASA,EAAMxC,OACnBsI,EAAa9F,EAAO+F,EAAAA,EAAUI,QAC9BvI,CACN,E,cCJA,QAJU,WACR,OAAOwI,EAAAA,EAAKC,KAAKC,KACnB,ECGA,SAASC,EAAahE,EAAGiE,EAAMC,EAAOlB,GACpC,IAAIpD,EACJ,GACEA,EAAIE,EAAAA,EAAWkD,SACRhD,EAAEmE,QAAQvE,IAInB,OAFAsE,EAAME,MAAQH,EACdjE,EAAES,QAAQb,EAAGsE,GACNtE,CACT,CAsBA,SAASyE,EAAmBrE,GAC1B,IAAIsE,EAAa,IAAIjE,EAAAA,EAAM,CAAEkE,WAAYvE,EAAEwE,iBAAkBC,SAASzE,EAAEyB,SASxE,OARA3B,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GACxBI,EAAE0E,SAAS9E,GAAG3E,QACjBqJ,EAAW7D,QAAQb,EAAGI,EAAEoB,KAAKxB,GAEjC,GACAE,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7ByD,EAAWnD,QAAQN,EAAGb,EAAEe,KAAKF,GAC/B,GACOyD,CACT,CA4BA,SAASK,EAAcC,EAAMC,GAC3B,IAcIC,EAAIC,EAdJC,EAAIJ,EAAKI,EACTC,EAAIL,EAAKK,EAITC,EAAKL,EAAMG,EAAIA,EACfG,EAAKN,EAAMI,EAAIA,EACfjE,EAAI4D,EAAKQ,MAAQ,EACjBC,EAAIT,EAAKU,OAAS,EAEtB,IAAKJ,IAAOC,EACV,MAAM,IAAII,MAAM,6DAoBlB,OAhBI/K,KAAKgL,IAAIL,GAAMnE,EAAIxG,KAAKgL,IAAIN,GAAMG,GAEhCF,EAAK,IACPE,GAAKA,GAEPP,EAAMO,EAAIH,EAAMC,EAChBJ,EAAKM,IAGDH,EAAK,IACPlE,GAAKA,GAEP8D,EAAK9D,EACL+D,EAAM/D,EAAImE,EAAMD,GAGX,CAAEF,EAAGA,EAAIF,EAAIG,EAAGA,EAAIF,EAC7B,CAMA,SAASU,EAAiBzF,GACxB,IAAI0F,EAAW5F,EAAAA,EAAMA,EAAAA,EAAQ6F,EAAQ3F,GAAK,GAAI,WAC5C,MAAO,EACT,GAQA,OAPAF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GACdgG,EAAOxE,EAAKwE,KACX9F,EAAAA,EAAc8F,KACjBF,EAASE,GAAMxE,EAAKyE,OAASjG,EAEjC,GACO8F,CACT,CAkDA,SAASI,EAAc9F,EAAG1C,EAAQsI,EAAMC,GACtC,IAAIzE,EAAO,CACTgE,MAAO,EACPE,OAAQ,GAMV,OAJIS,UAAU9K,QAAU,IACtBmG,EAAKwE,KAAOA,EACZxE,EAAKyE,MAAQA,GAER7B,EAAahE,EAAG,SAAUoB,EAAM9D,EACzC,CAEA,SAASqI,EAAQ3F,GACf,OAAOF,EACLA,EAAAA,EAAME,EAAEQ,QAAS,SAAUZ,GACzB,IAAIgG,EAAO5F,EAAEoB,KAAKxB,GAAGgG,KACrB,IAAK9F,EAAAA,EAAc8F,GACjB,OAAOA,CAEX,GAEJ,CAuBA,SAASI,EAAKhD,EAAMiD,GAClB,IAAIrL,EAAQkF,IACZ,IACE,OAAOmG,GACT,CAAE,QACAC,QAAQC,IAAInD,EAAO,WAAalD,IAAUlF,GAAS,KACrD,CACF,CAEA,SAASwL,EAAOpD,EAAMiD,GACpB,OAAOA,GACT,CC/NA,SAASH,EAAc9F,EAAGqG,EAAM/I,EAAQgJ,EAAIC,EAAQX,GAClD,IAAI/C,EAAQ,CAAEuC,MAAO,EAAGE,OAAQ,EAAGM,KAAMA,EAAMY,WAAYH,GACvDI,EAAOF,EAAOF,GAAMT,EAAO,GAC3BvG,EAAOqH,EAAkB1G,EAAG,SAAU6C,EAAOvF,GACjDiJ,EAAOF,GAAMT,GAAQvG,EACrBW,EAAE2G,UAAUtH,EAAMiH,GACdG,GACFzG,EAAEmB,QAAQsF,EAAMpH,EAAM,CAAE4B,OAAQ,GAEpC,CCxBA,SAAS2F,EAAK5G,GACZ,IAAI6G,EAAU7G,EAAEyB,QAAQqF,QAAQC,cAChB,OAAZF,GAAgC,OAAZA,GAyB1B,SAAkB7G,GAChBF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7BoH,EAAYhH,EAAEoB,KAAKxB,GACrB,GAEAE,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GAClBf,EAAAA,EAAUiB,EAAKkG,OAAQD,GACnBlH,EAAAA,EAAMiB,EAAM,MACdiG,EAAYjG,EAEhB,EACF,CApCImG,CAASlH,GAGK,OAAZ6G,GAAgC,OAAZA,KAuC1B,SAAgB7G,GACdF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7BuH,EAAUnH,EAAEoB,KAAKxB,GACnB,GAEAE,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GAClBf,EAAAA,EAAUiB,EAAKkG,OAAQE,GACnBrH,EAAAA,EAAMiB,EAAM,MACdoG,EAAUpG,EAEd,EACF,CAlDIqG,CAAOpH,GACPqH,EAAgBrH,GAEpB,CAEA,SAASqH,EAAgBrH,GACvBF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B0H,EAAmBtH,EAAEoB,KAAKxB,GAC5B,GACAE,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7ByG,EAAmBtH,EAAEe,KAAKF,GAC5B,EACF,CAEA,SAASyG,EAAmBpD,GAC1B,IAAIlD,EAAIkD,EAAMkB,MACdlB,EAAMkB,MAAQlB,EAAMoB,OACpBpB,EAAMoB,OAAStE,CACjB,CAgBA,SAASgG,EAAY9C,GACnBA,EAAMe,GAAKf,EAAMe,CACnB,CAgBA,SAASkC,EAAUjD,GACjB,IAAIc,EAAId,EAAMc,EACdd,EAAMc,EAAId,EAAMe,EAChBf,EAAMe,EAAID,CACZ,CCrDA,SAAS1C,EAAItC,GACXA,EAAEyB,QAAQ8F,YAAc,GACxBzH,EAAAA,EAAUE,EAAEY,QAAS,SAAUG,IAKjC,SAAuBf,EAAGa,GACxB,IAYIuD,EAAOF,EAAOpC,EAZdlC,EAAIiB,EAAEjB,EACN4H,EAAQxH,EAAEoB,KAAKxB,GAAGgG,KAClB5E,EAAIH,EAAEG,EACNyG,EAAQzH,EAAEoB,KAAKJ,GAAG4E,KAClB5C,EAAOnC,EAAEmC,KACT0E,EAAY1H,EAAEe,KAAKF,GACnB8G,EAAYD,EAAUC,UAE1B,GAAIF,IAAUD,EAAQ,EAAG,OAKzB,IAHAxH,EAAE8C,WAAWjC,GAGRiB,EAAI,IAAK0F,EAAOA,EAAQC,IAAS3F,IAAK0F,EACzCE,EAAUT,OAAS,GAQnB7C,EAAQsC,EAAkB1G,EAAG,OAP7BkE,EAAQ,CACNkB,MAAO,EACPE,OAAQ,EACRoC,UAAWA,EACXE,QAAS/G,EACT+E,KAAM4B,GAEoC,MACxCA,IAAUG,IACZzD,EAAMkB,MAAQsC,EAAUtC,MACxBlB,EAAMoB,OAASoC,EAAUpC,OAEzBpB,EAAME,MAAQ,aAEdF,EAAM2D,SAAWH,EAAUG,UAE7B7H,EAAEmB,QAAQvB,EAAGwE,EAAO,CAAEnD,OAAQyG,EAAUzG,QAAU+B,GACxC,IAANlB,GACF9B,EAAEyB,QAAQ8F,YAAYjI,KAAK8E,GAE7BxE,EAAIwE,EAGNpE,EAAEmB,QAAQvB,EAAGoB,EAAG,CAAEC,OAAQyG,EAAUzG,QAAU+B,EAChD,CA5CI8E,CAAc9H,EAAGe,EACnB,EACF,CCOA,QANA,SAAetD,EAAOvD,GACpB,OAAQuD,GAASA,EAAMxC,OACnBsI,EAAa9F,GAAOnD,EAAAA,EAAAA,GAAaJ,EAAU,GAAI0J,QAC/CvI,CACN,ECNA,SAAS0M,EAAY/H,GACnB,IAAI0C,EAAU,CAAC,EA2Bf5C,EAAAA,EAAUE,EAAEhC,UAzBZ,SAAS2E,EAAI/C,GACX,IAAIiD,EAAQ7C,EAAEoB,KAAKxB,GACnB,GAAIE,EAAAA,EAAM4C,EAAS9C,GACjB,OAAOiD,EAAM+C,KAEflD,EAAQ9C,IAAK,EAEb,IAAIgG,EAAO9F,EACTA,EAAAA,EAAME,EAAEiC,SAASrC,GAAI,SAAUiB,GAC7B,OAAO8B,EAAI9B,EAAEG,GAAKhB,EAAEe,KAAKF,GAAGmH,MAC9B,IAYF,OAREpC,IAASqC,OAAOC,wBACP7M,IAATuK,GACS,OAATA,IAGAA,EAAO,GAGD/C,EAAM+C,KAAOA,CACvB,EAGF,CAMA,SAASuC,GAAMnI,EAAGa,GAChB,OAAOb,EAAEoB,KAAKP,EAAEG,GAAG4E,KAAO5F,EAAEoB,KAAKP,EAAEjB,GAAGgG,KAAO5F,EAAEe,KAAKF,GAAGmH,MACzD,CC/BA,SAASI,GAAapI,GACpB,IAOIe,EAAMsH,EAPNC,EAAI,IAAIjI,EAAAA,EAAM,CAAEkI,UAAU,IAG1B3N,EAAQoF,EAAEQ,QAAQ,GAClBgI,EAAOxI,EAAEE,YAIb,IAHAoI,EAAE7H,QAAQ7F,EAAO,CAAC,GAGX6N,GAAUH,EAAGtI,GAAKwI,GACvBzH,EAAO2H,GAAiBJ,EAAGtI,GAC3BqI,EAAQC,EAAEnE,QAAQpD,EAAKnB,GAAKuI,GAAMnI,EAAGe,IAASoH,GAAMnI,EAAGe,GACvD4H,GAAWL,EAAGtI,EAAGqI,GAGnB,OAAOC,CACT,CAMA,SAASG,GAAUH,EAAGtI,GAcpB,OADAF,EAAAA,EAAUwI,EAAE9H,QAZZ,SAASmC,EAAI/C,GACXE,EAAAA,EAAUE,EAAE4I,UAAUhJ,GAAI,SAAUiB,GAClC,IAAIgI,EAAQhI,EAAEjB,EACZoB,EAAIpB,IAAMiJ,EAAQhI,EAAEG,EAAI6H,EACrBP,EAAEnE,QAAQnD,IAAOmH,GAAMnI,EAAGa,KAC7ByH,EAAE7H,QAAQO,EAAG,CAAC,GACdsH,EAAEnH,QAAQvB,EAAGoB,EAAG,CAAC,GACjB2B,EAAI3B,GAER,EACF,GAGOsH,EAAEpI,WACX,CAMA,SAASwI,GAAiBJ,EAAGtI,GAC3B,OAAOF,EAAQE,EAAEY,QAAS,SAAUC,GAClC,GAAIyH,EAAEnE,QAAQtD,EAAEjB,KAAO0I,EAAEnE,QAAQtD,EAAEG,GACjC,OAAOmH,GAAMnI,EAAGa,EAEpB,EACF,CAEA,SAAS8H,GAAWL,EAAGtI,EAAGqI,GACxBvI,EAAAA,EAAUwI,EAAE9H,QAAS,SAAUZ,GAC7BI,EAAEoB,KAAKxB,GAAGgG,MAAQyC,CACpB,EACF,C,yBC9DA,SAbA,SAAoBS,GAClB,OAAO,SAAS7O,EAAYuC,EAAWuM,GACrC,IAAIC,EAAWpL,OAAO3D,GACtB,KAAKkD,EAAAA,GAAAA,GAAYlD,GAAa,CAC5B,IAAIC,GAAWI,EAAAA,EAAAA,GAAakC,EAAW,GACvCvC,GAAagP,EAAAA,GAAAA,GAAKhP,GAClBuC,EAAY,SAASP,GAAO,OAAO/B,EAAS8O,EAAS/M,GAAMA,EAAK+M,EAAW,CAC7E,CACA,IAAIhO,EAAQ8N,EAAc7O,EAAYuC,EAAWuM,GACjD,OAAO/N,GAAS,EAAIgO,EAAS9O,EAAWD,EAAWe,GAASA,QAASK,CACvE,CACF,E,yBCaA,SAPA,SAAmBM,GACjB,IAAIT,GAASI,EAAAA,GAAAA,GAASK,GAClBuN,EAAYhO,EAAS,EAEzB,OAAOA,IAAWA,EAAUgO,EAAYhO,EAASgO,EAAYhO,EAAU,CACzE,EC5BA,IAAIR,GAAYF,KAAKG,ICoCrB,SAFWwO,GDGX,SAAmB1L,EAAOjB,EAAWuM,GACnC,IAAI9N,EAAkB,MAATwC,EAAgB,EAAIA,EAAMxC,OACvC,IAAKA,EACH,OAAQ,EAEV,IAAID,EAAqB,MAAb+N,EAAoB,EAAIK,GAAUL,GAI9C,OAHI/N,EAAQ,IACVA,EAAQN,GAAUO,EAASD,EAAO,KAE7BqO,EAAAA,GAAAA,GAAc5L,GAAOnD,EAAAA,EAAAA,GAAakC,EAAW,GAAIxB,EAC1D,G,eE/C0B8E,EAAAA,EAAW,GCDXA,EAAAA,EAAW,G,+CCKrBwJ,E,QAAAA,GAAa,UCGVC,OAAO,uFCX1B,IAAIC,GAAgB,kBAQhBC,GAAW,IAAMD,GAAgB,IACjCE,GAAU,kDACVC,GAAS,2BAETC,GAAc,KAAOJ,GAAgB,IACrCK,GAAa,kCACbC,GAAa,qCAIbC,GAPa,MAAQL,GAAU,IAAMC,GAAS,IAOtB,IACxBK,GAAW,oBAEXC,GAAQD,GAAWD,IADP,gBAAwB,CAACH,GAAaC,GAAYC,IAAYpK,KAAK,KAAO,IAAMsK,GAAWD,GAAW,MAElHG,GAAW,MAAQ,CAACN,GAAcF,GAAU,IAAKA,GAASG,GAAYC,GAAYL,IAAU/J,KAAK,KAAO,IAG5F6J,OAAOI,GAAS,MAAQA,GAAS,KAAOO,GAAWD,GAAO,KCQ1E,SAASE,KAAkB,CCtB3B,SAASxH,GAAI3C,EAAGoK,EAAIvE,GACb/F,GAAAA,EAAUsK,KACbA,EAAK,CAACA,IAGR,IAAIC,GAAcrK,EAAEsK,aAAetK,EAAEuK,WAAavK,EAAEwK,WAAWC,KAAKzK,GAEhE0K,EAAM,GACNhI,EAAU,CAAC,EAQf,OAPA5C,EAAAA,EAAOsK,EAAI,SAAUxK,GACnB,IAAKI,EAAEmE,QAAQvE,GACb,MAAM,IAAI2F,MAAM,6BAA+B3F,GAGjD+K,GAAM3K,EAAGJ,EAAa,SAAViG,EAAkBnD,EAAS2H,EAAYK,EACrD,GACOA,CACT,CAEA,SAASC,GAAM3K,EAAGJ,EAAGgL,EAAWlI,EAAS2H,EAAYK,GAC9C5K,EAAAA,EAAM4C,EAAS9C,KAClB8C,EAAQ9C,IAAK,EAERgL,GACHF,EAAIpL,KAAKM,GAEXE,EAAAA,EAAOuK,EAAWzK,GAAI,SAAUoB,GAC9B2J,GAAM3K,EAAGgB,EAAG4J,EAAWlI,EAAS2H,EAAYK,EAC9C,GACIE,GACFF,EAAIpL,KAAKM,GAGf,CDVAuK,GAAetM,UAAY,IAAI0H,M,QEc/B,SAASsF,GAAe7K,GACtBA,ElBZF,SAAkBA,GAChB,IAAIsE,GAAa,IAAIjE,EAAAA,GAAQoE,SAASzE,EAAEyB,SAYxC,OAXA3B,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B0E,EAAW7D,QAAQb,EAAGI,EAAEoB,KAAKxB,GAC/B,GACAE,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIiK,EAAcxG,EAAWvD,KAAKF,EAAEjB,EAAGiB,EAAEG,IAAM,CAAEC,OAAQ,EAAG+G,OAAQ,GAChEnF,EAAQ7C,EAAEe,KAAKF,GACnByD,EAAWnD,QAAQN,EAAEjB,EAAGiB,EAAEG,EAAG,CAC3BC,OAAQ6J,EAAY7J,OAAS4B,EAAM5B,OACnC+G,OAAQxN,KAAKG,IAAImQ,EAAY9C,OAAQnF,EAAMmF,SAE/C,GACO1D,CACT,CkBFMyG,CAAS/K,GACb+H,EAAY/H,GACZ,IAIIa,EAJAyH,EAAIF,GAAapI,GAKrB,IAJAgL,GAAiB1C,GACjB2C,GAAc3C,EAAGtI,GAGTa,EAAIqK,GAAU5C,IAEpB6C,GAAc7C,EAAGtI,EAAGa,EADhBuK,GAAU9C,EAAGtI,EAAGa,GAGxB,CAKA,SAASoK,GAAc3C,EAAGtI,GACxB,IAAIoK,EC/DN,SAAmBpK,EAAGoK,GACpB,OAAOzH,GAAI3C,EAAGoK,EAAI,OACpB,CD6DWiB,CAAc/C,EAAGA,EAAE9H,SAC5B4J,EAAKA,EAAGkB,MAAM,EAAGlB,EAAGnP,OAAS,GAC7B6E,EAAAA,EAAUsK,EAAI,SAAUxK,IAK1B,SAAwB0I,EAAGtI,EAAGuL,GAC5B,IAAIC,EAAWlD,EAAElH,KAAKmK,GAClBE,EAASD,EAASC,OACtBnD,EAAEvH,KAAKwK,EAAOE,GAAQC,SAAWC,GAAarD,EAAGtI,EAAGuL,EACtD,CARIK,CAAetD,EAAGtI,EAAGJ,EACvB,EACF,CAYA,SAAS+L,GAAarD,EAAGtI,EAAGuL,GAC1B,IACIE,EADWnD,EAAElH,KAAKmK,GACAE,OAElBI,GAAc,EAEdC,EAAY9L,EAAEe,KAAKwK,EAAOE,GAE1BM,EAAW,EAyBf,OAvBKD,IACHD,GAAc,EACdC,EAAY9L,EAAEe,KAAK0K,EAAQF,IAG7BQ,EAAWD,EAAU7K,OAErBnB,EAAAA,EAAUE,EAAE4I,UAAU2C,GAAQ,SAAU1K,GACtC,IA2HsBmL,EAAGpM,EA3HrBqM,EAAYpL,EAAEjB,IAAM2L,EACtBjI,EAAQ2I,EAAYpL,EAAEG,EAAIH,EAAEjB,EAE9B,GAAI0D,IAAUmI,EAAQ,CACpB,IAAIS,EAAeD,IAAcJ,EAC/BM,EAAcnM,EAAEe,KAAKF,GAAGI,OAG1B,GADA8K,GAAYG,EAAeC,GAAeA,EAoHtBH,EAnHFT,EAmHK3L,EAnHE0D,EAAVgF,EAoHP8D,QAAQJ,EAAGpM,GApHc,CAC/B,IAAIyM,EAAgB/D,EAAEvH,KAAKwK,EAAOjI,GAAOoI,SACzCK,GAAYG,GAAgBG,EAAgBA,CAC9C,CACF,CACF,GAEON,CACT,CAEA,SAASf,GAAiBsB,EAAMzI,GAC1BkC,UAAU9K,OAAS,IACrB4I,EAAOyI,EAAK9L,QAAQ,IAEtB+L,GAAgBD,EAAM,CAAC,EAAG,EAAGzI,EAC/B,CAEA,SAAS0I,GAAgBD,EAAM5J,EAAS8J,EAAS5M,EAAG6L,GAClD,IAAIgB,EAAMD,EACN3J,EAAQyJ,EAAKlL,KAAKxB,GAkBtB,OAhBA8C,EAAQ9C,IAAK,EACbE,EAAAA,EAAUwM,EAAK9B,UAAU5K,GAAI,SAAUoB,GAChClB,EAAAA,EAAM4C,EAAS1B,KAClBwL,EAAUD,GAAgBD,EAAM5J,EAAS8J,EAASxL,EAAGpB,GAEzD,GAEAiD,EAAM4J,IAAMA,EACZ5J,EAAM6J,IAAMF,IACRf,EACF5I,EAAM4I,OAASA,SAGR5I,EAAM4I,OAGRe,CACT,CAEA,SAAStB,GAAUoB,GACjB,OAAOxM,GAAOwM,EAAK1L,QAAS,SAAUC,GACpC,OAAOyL,EAAKvL,KAAKF,GAAG6K,SAAW,CACjC,EACF,CAEA,SAASN,GAAU9C,EAAGtI,EAAGe,GACvB,IAAInB,EAAImB,EAAKnB,EACToB,EAAID,EAAKC,EAKRhB,EAAEoM,QAAQxM,EAAGoB,KAChBpB,EAAImB,EAAKC,EACTA,EAAID,EAAKnB,GAGX,IAAI+M,EAASrE,EAAElH,KAAKxB,GAChBgN,EAAStE,EAAElH,KAAKJ,GAChB6L,EAAYF,EACZG,GAAO,EAIPH,EAAOD,IAAME,EAAOF,MACtBG,EAAYD,EACZE,GAAO,GAGT,IAAIC,EAAajN,GAAAA,EAASE,EAAEY,QAAS,SAAUG,GAC7C,OACE+L,IAASE,GAAa1E,EAAGA,EAAElH,KAAKL,EAAKnB,GAAIiN,IACzCC,IAASE,GAAa1E,EAAGA,EAAElH,KAAKL,EAAKC,GAAI6L,EAE7C,GAEA,OAAO/M,EAAQiN,EAAY,SAAUhM,GACnC,OAAOoH,GAAMnI,EAAGe,EAClB,EACF,CAEA,SAASoK,GAAc7C,EAAGtI,EAAGa,EAAGoM,GAC9B,IAAIrN,EAAIiB,EAAEjB,EACNoB,EAAIH,EAAEG,EACVsH,EAAExF,WAAWlD,EAAGoB,GAChBsH,EAAEnH,QAAQ8L,EAAErN,EAAGqN,EAAEjM,EAAG,CAAC,GACrBgK,GAAiB1C,GACjB2C,GAAc3C,EAAGtI,GAInB,SAAqBsI,EAAGtI,GACtB,IAAI6D,EAAO/D,GAAOwI,EAAE9H,QAAS,SAAUZ,GACrC,OAAQI,EAAEoB,KAAKxB,GAAG6L,MACpB,GACIrB,EE1MN,SAAkBpK,EAAGoK,GACnB,OAAOzH,GAAI3C,EAAGoK,EAAI,MACpB,CFwMWiB,CAAa/C,EAAGzE,GACzBuG,EAAKA,EAAGkB,MAAM,GACdxL,EAAAA,EAAUsK,EAAI,SAAUxK,GACtB,IAAI6L,EAASnD,EAAElH,KAAKxB,GAAG6L,OACrB1K,EAAOf,EAAEe,KAAKnB,EAAG6L,GACjByB,GAAU,EAEPnM,IACHA,EAAOf,EAAEe,KAAK0K,EAAQ7L,GACtBsN,GAAU,GAGZlN,EAAEoB,KAAKxB,GAAGgG,KAAO5F,EAAEoB,KAAKqK,GAAQ7F,MAAQsH,EAAUnM,EAAKiH,QAAUjH,EAAKiH,OACxE,EACF,CArBEmF,CAAY7E,EAAGtI,EACjB,CAiCA,SAASgN,GAAaV,EAAMK,EAAQS,GAClC,OAAOA,EAAUX,KAAOE,EAAOD,KAAOC,EAAOD,KAAOU,EAAUV,GAChE,CGlNA,SAAS9G,GAAK5F,GACZ,OAAQA,EAAEyB,QAAQ4L,QAChB,IAAK,kBASL,QACEC,GAAqBtN,SAPvB,IAAK,cAcT,SAAyBA,GACvB+H,EAAY/H,GACZoI,GAAapI,EACf,CAhBMuN,CAAgBvN,GAChB,MACF,IAAK,eACHwN,GAAkBxN,GAKxB,CH9BA6K,GAAeG,iBAAmBA,GAClCH,GAAeI,cAAgBA,GAC/BJ,GAAec,aAAeA,GAC9Bd,GAAeK,UAAYA,GAC3BL,GAAeO,UAAYA,GAC3BP,GAAeM,cAAgBA,GG4B/B,IAAIqC,GAAoBzF,EAOxB,SAASuF,GAAqBtN,GAC5B6K,GAAe7K,EACjB,C,0BCvBA,SAASsC,GAAItC,GACX,IAAI6D,EAAO6C,EAAkB1G,EAAG,OAAQ,CAAC,EAAG,SACxCyN,EAqEN,SAAoBzN,GAClB,IAAIyN,EAAS,CAAC,EACd,SAAS9K,EAAI/C,EAAG8N,GACd,IAAIhJ,EAAW1E,EAAE0E,SAAS9E,GACtB8E,GAAYA,EAASzJ,QACvB6E,EAAAA,EAAU4E,EAAU,SAAU6G,GAC5B5I,EAAI4I,EAAOmC,EAAQ,EACrB,GAEFD,EAAO7N,GAAK8N,CACd,CAIA,OAHA5N,EAAAA,EAAUE,EAAE0E,WAAY,SAAU9E,GAChC+C,EAAI/C,EAAG,EACT,GACO6N,CACT,CApFeE,CAAW3N,GACpBsF,EAASxF,EAAMA,GAAAA,EAAS2N,IAAW,EACnCG,EAAU,EAAItI,EAAS,EAE3BtF,EAAEyB,QAAQoM,YAAchK,EAGxB/D,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7Bb,EAAEe,KAAKF,GAAGmH,QAAU4F,CACtB,GAGA,IAAI3M,EA0EN,SAAoBjB,GAClB,OAAOF,GAAAA,EACLE,EAAEY,QACF,SAAU8J,EAAK7J,GACb,OAAO6J,EAAM1K,EAAEe,KAAKF,GAAGI,MACzB,EACA,EAEJ,CAlFe6M,CAAW9N,GAAK,EAG7BF,EAAAA,EAAUE,EAAE0E,WAAY,SAAU6G,GAChC5I,GAAI3C,EAAG6D,EAAM+J,EAAS3M,EAAQqE,EAAQmI,EAAQlC,EAChD,GAIAvL,EAAEyB,QAAQsM,eAAiBH,CAC7B,CAEA,SAASjL,GAAI3C,EAAG6D,EAAM+J,EAAS3M,EAAQqE,EAAQmI,EAAQ7N,GACrD,IAAI8E,EAAW1E,EAAE0E,SAAS9E,GAC1B,GAAK8E,EAASzJ,OAAd,CAOA,IAAI+S,EAAMtH,EAAmB1G,EAAG,OAC5BiO,EAASvH,EAAmB1G,EAAG,OAC/B6C,EAAQ7C,EAAEoB,KAAKxB,GAEnBI,EAAE2G,UAAUqH,EAAKpO,GACjBiD,EAAMqL,UAAYF,EAClBhO,EAAE2G,UAAUsH,EAAQrO,GACpBiD,EAAMsL,aAAeF,EAErBnO,EAAAA,EAAU4E,EAAU,SAAU6G,GAC5B5I,GAAI3C,EAAG6D,EAAM+J,EAAS3M,EAAQqE,EAAQmI,EAAQlC,GAE9C,IAAI6C,EAAYpO,EAAEoB,KAAKmK,GACnB8C,EAAWD,EAAUF,UAAYE,EAAUF,UAAY3C,EACvD+C,EAAcF,EAAUD,aAAeC,EAAUD,aAAe5C,EAChEgD,EAAaH,EAAUF,UAAYjN,EAAS,EAAIA,EAChD+G,EAASqG,IAAaC,EAAc,EAAIhJ,EAASmI,EAAO7N,GAAK,EAEjEI,EAAEmB,QAAQ6M,EAAKK,EAAU,CACvBpN,OAAQsN,EACRvG,OAAQA,EACRwG,aAAa,IAGfxO,EAAEmB,QAAQmN,EAAaL,EAAQ,CAC7BhN,OAAQsN,EACRvG,OAAQA,EACRwG,aAAa,GAEjB,GAEKxO,EAAEyL,OAAO7L,IACZI,EAAEmB,QAAQ0C,EAAMmK,EAAK,CAAE/M,OAAQ,EAAG+G,OAAQ1C,EAASmI,EAAO7N,IAlC5D,MAJMA,IAAMiE,GACR7D,EAAEmB,QAAQ0C,EAAMjE,EAAG,CAAEqB,OAAQ,EAAG+G,OAAQ4F,GAuC9C,C,eCrEA,SAJA,SAAmBjS,GACjB,OAAO8S,EAAAA,GAAAA,GAAU9S,EAAO+S,EAC1B,ECSA,SAASC,GAAgB3O,EAAG4F,EAAMgJ,GAChC,IAAI/K,EAmCN,SAAwB7D,GACtB,IAAIJ,EACJ,KAAOI,EAAEmE,QAASvE,EAAIE,EAAAA,EAAW,YACjC,OAAOF,CACT,CAvCaiP,CAAe7O,GACxB9E,EAAS,IAAImF,EAAAA,EAAM,CAAEyO,UAAU,IAC5BrK,SAAS,CAAEZ,KAAMA,IACjBkL,oBAAoB,SAAUnP,GAC7B,OAAOI,EAAEoB,KAAKxB,EAChB,GA2BJ,OAzBAE,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GAChB6L,EAASzL,EAAEyL,OAAO7L,IAEhBwB,EAAKwE,OAASA,GAASxE,EAAK4N,SAAWpJ,GAAQA,GAAQxE,EAAKuE,WAC9DzK,EAAOuF,QAAQb,GACf1E,EAAOyL,UAAU/G,EAAG6L,GAAU5H,GAG9B/D,EAAAA,EAAUE,EAAE4O,GAAchP,GAAI,SAAUiB,GACtC,IAAImL,EAAInL,EAAEjB,IAAMA,EAAIiB,EAAEG,EAAIH,EAAEjB,EAC1BmB,EAAO7F,EAAO6F,KAAKiL,EAAGpM,GACtBqB,EAAUnB,EAAAA,EAAciB,GAAsB,EAAdA,EAAKE,OACvC/F,EAAOiG,QAAQ6K,EAAGpM,EAAG,CAAEqB,OAAQjB,EAAEe,KAAKF,GAAGI,OAASA,GACpD,GAEInB,EAAAA,EAAMsB,EAAM,YACdlG,EAAOuF,QAAQb,EAAG,CAChBqP,WAAY7N,EAAK6N,WAAWrJ,GAC5BsJ,YAAa9N,EAAK8N,YAAYtJ,KAItC,GAEO1K,CACT,C,eC/CA,SAbA,SAAuBiD,EAAOgR,EAAQC,GAMpC,IALA,IAAIpU,GAAS,EACTC,EAASkD,EAAMlD,OACfoU,EAAaF,EAAOlU,OACpBC,EAAS,CAAC,IAELF,EAAQC,GAAQ,CACvB,IAAIU,EAAQX,EAAQqU,EAAaF,EAAOnU,QAASK,EACjD+T,EAAWlU,EAAQiD,EAAMnD,GAAQW,EACnC,CACA,OAAOT,CACT,ECGA,SAJA,SAAmBiD,EAAOgR,GACxB,OAAOG,GAAcnR,GAAS,GAAIgR,GAAU,GAAI7S,GAAAA,EAClD,E,gDCDA,SAVA,SAAoBmB,EAAO8R,GACzB,IAAItU,EAASwC,EAAMxC,OAGnB,IADAwC,EAAM+R,KAAKD,GACJtU,KACLwC,EAAMxC,GAAUwC,EAAMxC,GAAQU,MAEhC,OAAO8B,CACT,E,cCsBA,SA9BA,SAA0B9B,EAAO2H,GAC/B,GAAI3H,IAAU2H,EAAO,CACnB,IAAImM,OAAyBpU,IAAVM,EACf+T,EAAsB,OAAV/T,EACZgU,EAAiBhU,IAAUA,EAC3BiU,GAAcvM,EAAAA,EAAAA,GAAS1H,GAEvBkU,OAAyBxU,IAAViI,EACfwM,EAAsB,OAAVxM,EACZyM,EAAiBzM,IAAUA,EAC3B0M,GAAc3M,EAAAA,EAAAA,GAASC,GAE3B,IAAMwM,IAAcE,IAAgBJ,GAAejU,EAAQ2H,GACtDsM,GAAeC,GAAgBE,IAAmBD,IAAcE,GAChEN,GAAaG,GAAgBE,IAC5BN,GAAgBM,IACjBJ,EACH,OAAO,EAET,IAAMD,IAAcE,IAAgBI,GAAerU,EAAQ2H,GACtD0M,GAAeP,GAAgBE,IAAmBD,IAAcE,GAChEE,GAAaL,GAAgBE,IAC5BE,GAAgBF,IACjBI,EACH,OAAQ,CAEZ,CACA,OAAO,CACT,ECKA,SA3BA,SAAyBtU,EAAQ6H,EAAO2M,GAOtC,IANA,IAAIjV,GAAS,EACTkV,EAAczU,EAAO0U,SACrBC,EAAc9M,EAAM6M,SACpBlV,EAASiV,EAAYjV,OACrBoV,EAAeJ,EAAOhV,SAEjBD,EAAQC,GAAQ,CACvB,IAAIC,EAASoV,GAAiBJ,EAAYlV,GAAQoV,EAAYpV,IAC9D,GAAIE,EACF,OAAIF,GAASqV,EACJnV,EAGFA,GAAmB,QADd+U,EAAOjV,IACiB,EAAI,EAE5C,CAQA,OAAOS,EAAOT,MAAQsI,EAAMtI,KAC9B,ECOA,SA7BA,SAAqBf,EAAYsW,EAAWN,GAExCM,EADEA,EAAUtV,QACAb,EAAAA,GAAAA,GAASmW,EAAW,SAASrW,GACvC,OAAIC,EAAAA,GAAAA,GAAQD,GACH,SAASyB,GACd,OAAOc,EAAAA,GAAAA,GAAQd,EAA2B,IAApBzB,EAASe,OAAef,EAAS,GAAKA,EAC9D,EAEKA,CACT,GAEY,CAACsJ,EAAAA,GAGf,IAAIxI,GAAS,EACbuV,GAAYnW,EAAAA,GAAAA,GAASmW,GAAWC,EAAAA,GAAAA,GAAUlW,EAAAA,IAE1C,IAAIY,GAASb,EAAAA,GAAAA,GAAQJ,EAAY,SAAS0B,EAAOM,EAAKhC,GAIpD,MAAO,CAAE,UAHMG,EAAAA,GAAAA,GAASmW,EAAW,SAASrW,GAC1C,OAAOA,EAASyB,EAClB,GAC+B,QAAWX,EAAO,MAASW,EAC5D,GAEA,OAAO8U,GAAWvV,EAAQ,SAASO,EAAQ6H,GACzC,OAAOoN,GAAgBjV,EAAQ6H,EAAO2M,EACxC,EACF,E,0BCCA,UAbalS,EAAAA,GAAAA,GAAS,SAAS9D,EAAYsW,GACzC,GAAkB,MAAdtW,EACF,MAAO,GAET,IAAIgB,EAASsV,EAAUtV,OAMvB,OALIA,EAAS,IAAKG,EAAAA,GAAAA,GAAenB,EAAYsW,EAAU,GAAIA,EAAU,IACnEA,EAAY,GACHtV,EAAS,IAAKG,EAAAA,GAAAA,GAAemV,EAAU,GAAIA,EAAU,GAAIA,EAAU,MAC5EA,EAAY,CAACA,EAAU,KAElBI,GAAY1W,GAAYyD,EAAAA,GAAAA,GAAY6S,EAAW,GAAI,GAC5D,GCzBA,SAASK,GAAW5Q,EAAG0F,GAErB,IADA,IAAImL,EAAK,EACA/O,EAAI,EAAGA,EAAI4D,EAASzK,SAAU6G,EACrC+O,GAAMC,GAAmB9Q,EAAG0F,EAAS5D,EAAI,GAAI4D,EAAS5D,IAExD,OAAO+O,CACT,CAEA,SAASC,GAAmB9Q,EAAG+Q,EAAYC,GAuBzC,IAnBA,IAAIC,EAAWnR,GACbkR,EACAlR,EAAAA,EAAMkR,EAAY,SAAUpR,EAAGkC,GAC7B,OAAOA,CACT,IAEEoP,EAAepR,EAAAA,EACjBA,EAAAA,EAAMiR,EAAY,SAAUnR,GAC1B,OAAOE,GACLA,EAAAA,EAAME,EAAEiC,SAASrC,GAAI,SAAUiB,GAC7B,MAAO,CAAEsQ,IAAKF,EAASpQ,EAAEG,GAAIC,OAAQjB,EAAEe,KAAKF,GAAGI,OACjD,GACA,MAEJ,IAIEmQ,EAAa,EACVA,EAAaJ,EAAW/V,QAAQmW,IAAe,EACtD,IAAIC,EAAW,EAAID,EAAa,EAChCA,GAAc,EACd,IAAI9E,EAAOxM,EAAAA,EAAM,IAAI3E,MAAMkW,GAAW,WACpC,OAAO,CACT,GAGIR,EAAK,EAqBT,OApBA/Q,EAAAA,EAEEoR,EAAaI,QAAQ,SAAUrS,GAC7B,IAAIjE,EAAQiE,EAAMkS,IAAMC,EACxB9E,EAAKtR,IAAUiE,EAAMgC,OAGrB,IAFA,IAAIsQ,EAAY,EAETvW,EAAQ,GAETA,EAAQ,IACVuW,GAAajF,EAAKtR,EAAQ,IAI5BsR,EADAtR,EAASA,EAAQ,GAAM,IACRiE,EAAMgC,OAEvB4P,GAAM5R,EAAMgC,OAASsQ,CACvB,IAGKV,CACT,CCpDA,SAASW,GAAiBC,EAASC,GACjC,IAAIC,EAAgB,CAAC,EA+BrB,OA9BA7R,EAAAA,EAAU2R,EAAS,SAAUxS,EAAO6C,GAClC,IAAI8P,EAAOD,EAAc1S,EAAMW,GAAK,CAClCiS,SAAU,EACVnR,GAAI,GACJC,IAAK,GACLyJ,GAAI,CAACnL,EAAMW,GACXkC,EAAGA,GAEAhC,EAAAA,EAAcb,EAAM6S,cAEvBF,EAAIE,WAAa7S,EAAM6S,WAEvBF,EAAI3Q,OAAShC,EAAMgC,OAEvB,GAEAnB,EAAAA,EAAU4R,EAAG9Q,QAAS,SAAUC,GAC9B,IAAIkR,EAASJ,EAAc9Q,EAAEjB,GACzBoS,EAASL,EAAc9Q,EAAEG,GACxBlB,EAAAA,EAAciS,IAAYjS,EAAAA,EAAckS,KAC3CA,EAAOH,WACPE,EAAOpR,IAAIrB,KAAKqS,EAAc9Q,EAAEG,IAEpC,GAUF,SAA4BiR,GAC1B,IAAIR,EAAU,GAEd,SAASS,EAASC,GAChB,OAAO,SAAU/P,GACXA,EAAOgQ,SAITtS,EAAAA,EAAcsC,EAAO0P,aACrBhS,EAAAA,EAAcqS,EAAOL,aACrB1P,EAAO0P,YAAcK,EAAOL,aAiCpC,SAAsBO,EAAQnU,GAC5B,IAAIoU,EAAM,EACNrR,EAAS,EAEToR,EAAOpR,SACTqR,GAAOD,EAAOP,WAAaO,EAAOpR,OAClCA,GAAUoR,EAAOpR,QAGf/C,EAAO+C,SACTqR,GAAOpU,EAAO4T,WAAa5T,EAAO+C,OAClCA,GAAU/C,EAAO+C,QAGnBoR,EAAOjI,GAAKlM,EAAOkM,GAAGrI,OAAOsQ,EAAOjI,IACpCiI,EAAOP,WAAaQ,EAAMrR,EAC1BoR,EAAOpR,OAASA,EAChBoR,EAAOvQ,EAAItH,KAAK+X,IAAIrU,EAAO4D,EAAGuQ,EAAOvQ,GACrC5D,EAAOkU,QAAS,CAClB,CAlDQI,CAAaL,EAAQ/P,EAEzB,CACF,CAEA,SAASqQ,EAAUN,GACjB,OAAO,SAAU9P,GACfA,EAAW,GAAE/C,KAAK6S,GACQ,MAApB9P,EAAOwP,UACXI,EAAU3S,KAAK+C,EAEnB,CACF,CAEA,KAAO4P,EAAUhX,QAAQ,CACvB,IAAIgE,EAAQgT,EAAUS,MACtBjB,EAAQnS,KAAKL,GACba,EAAAA,EAAUb,EAAU,GAAE0T,UAAWT,EAASjT,IAC1Ca,EAAAA,EAAUb,EAAM0B,IAAK8R,EAAUxT,GACjC,CAEA,OAAOa,EAAAA,EACLA,GAAAA,EAAS2R,EAAS,SAAUxS,GAC1B,OAAQA,EAAMmT,MAChB,GACA,SAAUnT,GACR,OAAOa,EAAAA,EAAOb,EAAO,CAAC,KAAM,IAAK,aAAc,UACjD,EAEJ,CA7CS2T,CALS9S,GAAAA,EAAS6R,EAAe,SAAU1S,GAEhD,OAAQA,EAAM4S,QAChB,GAGF,CCzDA,SAASrC,GAAKiC,EAASoB,GACrB,IA0CuBC,EA1CnBC,ElCwNN,SAAmB9Y,EAAYgM,GAC7B,IAAI/K,EAAS,CAAE8X,IAAK,GAAIC,IAAK,IAQ7B,OAPAnT,EAAAA,EAAU7F,EAAY,SAAU0B,GAC1BsK,EAAGtK,GACLT,EAAO8X,IAAI1T,KAAK3D,GAEhBT,EAAO+X,IAAI3T,KAAK3D,EAEpB,GACOT,CACT,CkClOcwL,CAAe+K,EAAS,SAAUxS,GAC5C,OAAOa,EAAAA,EAAMb,EAAO,aACtB,GACIiU,EAAWH,EAAMC,IACnBG,EAAarT,GAASiT,EAAME,IAAK,SAAUhU,GACzC,OAAQA,EAAM6C,CAChB,GACAsI,EAAK,GACLkI,EAAM,EACNrR,EAAS,EACTmS,EAAU,EAEZF,EAAS1D,MA8BcsD,IA9BSD,EA+BzB,SAAUd,EAAQC,GACvB,OAAID,EAAOD,WAAaE,EAAOF,YACrB,EACCC,EAAOD,WAAaE,EAAOF,WAC7B,EAGDgB,EAA6Bd,EAAOlQ,EAAIiQ,EAAOjQ,EAAxCiQ,EAAOjQ,EAAIkQ,EAAOlQ,CACnC,IArCAsR,EAAUC,GAAkBjJ,EAAI+I,EAAYC,GAE5CtT,EAAAA,EAAUoT,EAAU,SAAUjU,GAC5BmU,GAAWnU,EAAMmL,GAAGnP,OACpBmP,EAAG9K,KAAKL,EAAMmL,IACdkI,GAAOrT,EAAM6S,WAAa7S,EAAMgC,OAChCA,GAAUhC,EAAMgC,OAChBmS,EAAUC,GAAkBjJ,EAAI+I,EAAYC,EAC9C,GAEA,IAAIlY,EAAS,CAAEkP,GAAItK,EAAAA,EAAUsK,IAK7B,OAJInJ,IACF/F,EAAO4W,WAAaQ,EAAMrR,EAC1B/F,EAAO+F,OAASA,GAEX/F,CACT,CAEA,SAASmY,GAAkBjJ,EAAI+I,EAAYnY,GAEzC,IADA,IAAIsY,EACGH,EAAWlY,SAAWqY,EAAOxT,EAAOqT,IAAarR,GAAK9G,GAC3DmY,EAAWT,MACXtI,EAAG9K,KAAKgU,EAAKlJ,IACbpP,IAEF,OAAOA,CACT,CCvCA,SAASuY,GAAavT,EAAGJ,EAAG8R,EAAImB,GAC9B,IAAIW,EAAUxT,EAAE0E,SAAS9E,GACrBwB,EAAOpB,EAAEoB,KAAKxB,GACd6T,EAAKrS,EAAOA,EAAK6N,gBAAa5T,EAC9BqY,EAAKtS,EAAOA,EAAK8N,iBAAc7T,EAC/BsY,EAAY,CAAC,EAEbF,IACFD,EAAU1T,GAAAA,EAAS0T,EAAS,SAAUxS,GACpC,OAAOA,IAAMyS,GAAMzS,IAAM0S,CAC3B,IAGF,IAAIE,EChBN,SAAoB5T,EAAGwT,GACrB,OAAO1T,EAAAA,EAAM0T,EAAS,SAAU5T,GAC9B,IAAIiU,EAAM7T,EAAEmC,QAAQvC,GACpB,GAAKiU,EAAI5Y,OAEF,CACL,IAAIC,EAAS4E,GAAAA,EACX+T,EACA,SAAUnJ,EAAK7J,GACb,IAAIE,EAAOf,EAAEe,KAAKF,GAChBiT,EAAQ9T,EAAEoB,KAAKP,EAAEjB,GACnB,MAAO,CACL0S,IAAK5H,EAAI4H,IAAMvR,EAAKE,OAAS6S,EAAMjO,MACnC5E,OAAQyJ,EAAIzJ,OAASF,EAAKE,OAE9B,EACA,CAAEqR,IAAK,EAAGrR,OAAQ,IAGpB,MAAO,CACLrB,EAAGA,EACHkS,WAAY5W,EAAOoX,IAAMpX,EAAO+F,OAChCA,OAAQ/F,EAAO+F,OAEnB,CApBE,MAAO,CAAErB,EAAGA,EAqBhB,EACF,CDVoBkS,CAAW9R,EAAGwT,GAChC1T,EAAAA,EAAU8T,EAAa,SAAU3U,GAC/B,GAAIe,EAAE0E,SAASzF,EAAMW,GAAG3E,OAAQ,CAC9B,IAAI8Y,EAAiBR,GAAavT,EAAGf,EAAMW,EAAG8R,EAAImB,GAClDc,EAAU1U,EAAMW,GAAKmU,EACjBjU,EAAAA,EAAMiU,EAAgB,gBA0CN1B,EAzCDpT,EAyCSqE,EAzCFyQ,EA0CzBjU,EAAAA,EAAcuS,EAAOP,aAMxBO,EAAOP,WAAaxO,EAAMwO,WAC1BO,EAAOpR,OAASqC,EAAMrC,SANtBoR,EAAOP,YACJO,EAAOP,WAAaO,EAAOpR,OAASqC,EAAMwO,WAAaxO,EAAMrC,SAC7DoR,EAAOpR,OAASqC,EAAMrC,QACzBoR,EAAOpR,QAAUqC,EAAMrC,QA5CvB,CAuCJ,IAA0BoR,EAAQ/O,CAtChC,GAEA,IAAImO,EAAUD,GAAiBoC,EAAalC,IAuB9C,SAAyBD,EAASkC,GAChC7T,EAAAA,EAAU2R,EAAS,SAAUxS,GAC3BA,EAAMmL,GAAKtK,EAAAA,EACTb,EAAMmL,GAAG9I,IAAI,SAAU1B,GACrB,OAAI+T,EAAU/T,GACL+T,EAAU/T,GAAGwK,GAEfxK,CACT,GAEJ,EACF,CAjCEoU,CAAgBvC,EAASkC,GAEzB,IAAIzY,EAASsU,GAAKiC,EAASoB,GAE3B,GAAIY,IACFvY,EAAOkP,GAAKtK,EAAAA,EAAU,CAAC2T,EAAIvY,EAAOkP,GAAIsJ,IAClC1T,EAAEiU,aAAaR,GAAIxY,QAAQ,CAC7B,IAAIiZ,EAASlU,EAAEoB,KAAKpB,EAAEiU,aAAaR,GAAI,IACrCU,EAASnU,EAAEoB,KAAKpB,EAAEiU,aAAaP,GAAI,IAChC5T,EAAAA,EAAM5E,EAAQ,gBACjBA,EAAO4W,WAAa,EACpB5W,EAAO+F,OAAS,GAElB/F,EAAO4W,YACJ5W,EAAO4W,WAAa5W,EAAO+F,OAASiT,EAAOrO,MAAQsO,EAAOtO,QAAU3K,EAAO+F,OAAS,GACvF/F,EAAO+F,QAAU,CACnB,CAGF,OAAO/F,CACT,CE1BA,SAAS2K,GAAM7F,GACb,IAAI2F,EAAUe,EAAa1G,GACzBoU,EAAkBC,GAAiBrU,EAAGF,EAAAA,EAAQ,EAAG6F,EAAU,GAAI,WAC/D2O,EAAgBD,GAAiBrU,EAAGF,EAAAA,EAAQ6F,EAAU,GAAI,GAAI,GAAI,YAEhED,EChBN,SAAmB1F,GACjB,IAAI0C,EAAU,CAAC,EACX6R,EAAczU,GAAAA,EAASE,EAAEQ,QAAS,SAAUZ,GAC9C,OAAQI,EAAE0E,SAAS9E,GAAG3E,MACxB,GACI0K,EAAU7F,EACZA,EAAAA,EAAMyU,EAAa,SAAU3U,GAC3B,OAAOI,EAAEoB,KAAKxB,GAAGgG,IACnB,IAEE4O,EAAS1U,EAAAA,EAAMA,EAAAA,EAAQ6F,EAAU,GAAI,WACvC,MAAO,EACT,GAUI8O,EAAY3U,GAASyU,EAAa,SAAU3U,GAC9C,OAAOI,EAAEoB,KAAKxB,GAAGgG,IACnB,GAGA,OAFA9F,EAAAA,EAAU2U,EAXV,SAAS9R,EAAI/C,GACX,IAAIE,EAAAA,EAAM4C,EAAS9C,GAAnB,CACA8C,EAAQ9C,IAAK,EACb,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GAClB4U,EAAOpT,EAAKwE,MAAMtG,KAAKM,GACvBE,EAAAA,EAAUE,EAAEuK,WAAW3K,GAAI+C,EAJE,CAK/B,GAOO6R,CACT,CDZiBE,CAAU1U,GACzB2U,GAAY3U,EAAG0F,GAKf,IAHA,IACEkP,EADEC,EAAS5M,OAAOC,kBAGXpG,EAAI,EAAGgT,EAAW,EAAGA,EAAW,IAAKhT,IAAKgT,EAAU,CAC3DC,GAAiBjT,EAAI,EAAIsS,EAAkBE,EAAexS,EAAI,GAAK,GAGnE,IAAI+O,EAAKD,GAAW5Q,EADpB0F,EAAWgB,EAAsB1G,IAE7B6Q,EAAKgE,IACPC,EAAW,EACXF,EAAO9U,GAAY4F,GACnBmP,EAAShE,EAEb,CAEA8D,GAAY3U,EAAG4U,EACjB,CAEA,SAASP,GAAiBrU,EAAGgV,EAAOpG,GAClC,OAAO9O,EAAAA,EAAMkV,EAAO,SAAUpP,GAC5B,OAAO+I,GAAgB3O,EAAG4F,EAAMgJ,EAClC,EACF,CAEA,SAASmG,GAAiBE,EAAapC,GACrC,IAAInB,EAAK,IAAIrR,EAAAA,EACbP,EAAAA,EAAUmV,EAAa,SAAUC,GAC/B,IAAIrR,EAAOqR,EAAGzT,QAAQoC,KAClBsR,EAAS5B,GAAa2B,EAAIrR,EAAM6N,EAAImB,GACxC/S,EAAAA,EAAUqV,EAAO/K,GAAI,SAAUxK,EAAGkC,GAChCoT,EAAG9T,KAAKxB,GAAGiG,MAAQ/D,CACrB,GE7DJ,SAAgC9B,EAAG0R,EAAItH,GACrC,IACEgL,EADE3O,EAAO,CAAC,EAGZ3G,EAAAA,EAAUsK,EAAI,SAAUxK,GAItB,IAHA,IACE6L,EACA4J,EAFE9J,EAAQvL,EAAEyL,OAAO7L,GAGd2L,GAAO,CASZ,IARAE,EAASzL,EAAEyL,OAAOF,KAEhB8J,EAAY5O,EAAKgF,GACjBhF,EAAKgF,GAAUF,IAEf8J,EAAYD,EACZA,EAAW7J,GAET8J,GAAaA,IAAc9J,EAE7B,YADAmG,EAAGvQ,QAAQkU,EAAW9J,GAGxBA,EAAQE,CACV,CACF,EAyBF,CFcI6J,CAAuBJ,EAAIxD,EAAIyD,EAAO/K,GACxC,EACF,CAEA,SAASuK,GAAY3U,EAAG0F,GACtB5F,EAAAA,EAAU4F,EAAU,SAAU6P,GAC5BzV,EAAAA,EAAUyV,EAAO,SAAU3V,EAAGkC,GAC5B9B,EAAEoB,KAAKxB,GAAGiG,MAAQ/D,CACpB,EACF,EACF,CGxEA,SAAS0T,GAAkBxV,GACzB,IAAIyV,EAoEN,SAAmBzV,GACjB,IAAI9E,EAAS,CAAC,EACVwR,EAAM,EAEV,SAAS/J,EAAI/C,GACX,IAAI6M,EAAMC,EACV5M,EAAAA,EAAUE,EAAE0E,SAAS9E,GAAI+C,GACzBzH,EAAO0E,GAAK,CAAE6M,IAAKA,EAAKC,IAAKA,IAC/B,CAGA,OAFA5M,EAAAA,EAAUE,EAAE0E,WAAY/B,GAEjBzH,CACT,CAhFsB0P,CAAU5K,GAE9BF,EAAAA,EAAUE,EAAEyB,QAAQ8F,YAAa,SAAU3H,GAUzC,IATA,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GACdgI,EAAUxG,EAAKwG,QACf8N,EAsCR,SAAkB1V,EAAGyV,EAAe7V,EAAGoB,GACrC,IAIIyK,EACAkK,EALAC,EAAQ,GACRC,EAAQ,GACRpJ,EAAMjS,KAAK+X,IAAIkD,EAAc7V,GAAG6M,IAAKgJ,EAAczU,GAAGyL,KACtDC,EAAMlS,KAAKG,IAAI8a,EAAc7V,GAAG8M,IAAK+I,EAAczU,GAAG0L,KAK1DjB,EAAS7L,EACT,GACE6L,EAASzL,EAAEyL,OAAOA,GAClBmK,EAAMtW,KAAKmM,SACJA,IAAWgK,EAAchK,GAAQgB,IAAMA,GAAOC,EAAM+I,EAAchK,GAAQiB,MACnFiJ,EAAMlK,EAGNA,EAASzK,EACT,MAAQyK,EAASzL,EAAEyL,OAAOA,MAAakK,GACrCE,EAAMvW,KAAKmM,GAGb,MAAO,CAAE/P,KAAMka,EAAM7T,OAAO8T,EAAMlD,WAAYgD,IAAKA,EACrD,CA7DmBG,CAAS9V,EAAGyV,EAAe7N,EAAQhI,EAAGgI,EAAQ5G,GACzDtF,EAAOga,EAASha,KAChBia,EAAMD,EAASC,IACfI,EAAU,EACVC,EAAQta,EAAKqa,GACbE,GAAY,EAETrW,IAAMgI,EAAQ5G,GAAG,CAGtB,GAFAI,EAAOpB,EAAEoB,KAAKxB,GAEVqW,EAAW,CACb,MAAQD,EAAQta,EAAKqa,MAAcJ,GAAO3V,EAAEoB,KAAK4U,GAAOrQ,QAAUvE,EAAKwE,MACrEmQ,IAGEC,IAAUL,IACZM,GAAY,EAEhB,CAEA,IAAKA,EAAW,CACd,KACEF,EAAUra,EAAKT,OAAS,GACxB+E,EAAEoB,KAAM4U,EAAQta,EAAKqa,EAAU,IAAK/G,SAAW5N,EAAKwE,MAEpDmQ,IAEFC,EAAQta,EAAKqa,EACf,CAEA/V,EAAE2G,UAAU/G,EAAGoW,GACfpW,EAAII,EAAEuK,WAAW3K,GAAG,EACtB,CACF,EACF,C,eCTA,SAJA,SAAgBnE,EAAQvB,GACtB,OAAOuB,IAAUiI,EAAAA,EAAAA,GAAWjI,GAAQya,EAAAA,GAAAA,GAAahc,GACnD,E,yBCKA,SANA,SAAeuB,EAAQvB,GACrB,OAAiB,MAAVuB,EACHA,GACA0a,EAAAA,GAAAA,GAAQ1a,GAAQya,EAAAA,GAAAA,GAAahc,GAAWkE,GAAAA,EAC9C,ECGA,SAASgY,GAAmBpW,EAAG0F,GAC7B,IAAI2Q,EAAY,CAAC,EAoCjB,OADAvW,GAAAA,EAAS4F,EAjCT,SAAoB4Q,EAAWf,GAC7B,IAEEgB,EAAK,EAGLC,EAAU,EACVC,EAAkBH,EAAUrb,OAC5Byb,EAAW5W,EAAOyV,GAsBpB,OApBAzV,EAAAA,EAAUyV,EAAO,SAAU3V,EAAGkC,GAC5B,IAAId,EAsEV,SAAmChB,EAAGJ,GACpC,GAAII,EAAEoB,KAAKxB,GAAGwE,MACZ,OAAOtE,GAAOE,EAAEiU,aAAarU,GAAI,SAAUoM,GACzC,OAAOhM,EAAEoB,KAAK4K,GAAG5H,KACnB,EAEJ,CA5EcuS,CAA0B3W,EAAGJ,GACnCgX,EAAK5V,EAAIhB,EAAEoB,KAAKJ,GAAG6E,MAAQ4Q,GAEzBzV,GAAKpB,IAAM8W,KACb5W,EAAAA,EAAUyV,EAAMjK,MAAMkL,EAAS1U,EAAI,GAAI,SAAU+U,GAC/C/W,EAAAA,EAAUE,EAAEiU,aAAa4C,GAAW,SAAU7K,GAC5C,IAAI8K,EAAS9W,EAAEoB,KAAK4K,GAClB+K,EAAOD,EAAOjR,QACXkR,EAAOR,GAAMK,EAAKG,IAAWD,EAAO1S,OAASpE,EAAEoB,KAAKyV,GAAUzS,OACjE4S,GAAYX,EAAWrK,EAAG6K,EAE9B,EACF,GAEAL,EAAU1U,EAAI,EACdyU,EAAKK,EAET,GAEOrB,CACT,GAGOc,CACT,CAsDA,SAASW,GAAYX,EAAWzW,EAAGoB,GACjC,GAAIpB,EAAIoB,EAAG,CACT,IAAI4Q,EAAMhS,EACVA,EAAIoB,EACJA,EAAI4Q,CACN,CAEA,IAAIqF,EAAaZ,EAAUzW,GACtBqX,IACHZ,EAAUzW,GAAKqX,EAAa,CAAC,GAE/BA,EAAWjW,IAAK,CAClB,CAEA,SAASkW,GAAYb,EAAWzW,EAAGoB,GACjC,GAAIpB,EAAIoB,EAAG,CACT,IAAI4Q,EAAMhS,EACVA,EAAIoB,EACJA,EAAI4Q,CACN,CACA,OAAO9R,EAAAA,EAAMuW,EAAUzW,GAAIoB,EAC7B,CAkDA,SAASmW,GAAqBnX,EAAG0F,EAAU7B,EAAMuT,EAAOC,GAMtD,IAAIC,EAAK,CAAC,EACRC,EAkDJ,SAAyBvX,EAAG0F,EAAU7B,EAAMwT,GAC1C,IAAIG,EAAa,IAAInX,EAAAA,EACnBoX,EAAazX,EAAEyB,QACfiW,EAgHJ,SAAa9J,EAAS+J,EAASN,GAC7B,OAAO,SAAUrX,EAAGJ,EAAGoB,GACrB,IAGIqH,EAHAsE,EAAS3M,EAAEoB,KAAKxB,GAChBgN,EAAS5M,EAAEoB,KAAKJ,GAChBsR,EAAM,EAIV,GADAA,GAAO3F,EAAOvH,MAAQ,EAClBtF,EAAAA,EAAM6M,EAAQ,YAChB,OAAQA,EAAO9E,SAASd,eACtB,IAAK,IACHsB,GAASsE,EAAOvH,MAAQ,EACxB,MACF,IAAK,IACHiD,EAAQsE,EAAOvH,MAAQ,EAa7B,GATIiD,IACFiK,GAAO+E,EAAahP,GAASA,GAE/BA,EAAQ,EAERiK,IAAQ3F,EAAOvI,MAAQuT,EAAU/J,GAAW,EAC5C0E,IAAQ1F,EAAOxI,MAAQuT,EAAU/J,GAAW,EAE5C0E,GAAO1F,EAAOxH,MAAQ,EAClBtF,EAAAA,EAAM8M,EAAQ,YAChB,OAAQA,EAAO/E,SAASd,eACtB,IAAK,IACHsB,EAAQuE,EAAOxH,MAAQ,EACvB,MACF,IAAK,IACHiD,GAASuE,EAAOxH,MAAQ,EAS9B,OALIiD,IACFiK,GAAO+E,EAAahP,GAASA,GAE/BA,EAAQ,EAEDiK,CACT,CACF,CA5JYsF,CAAIH,EAAWI,QAASJ,EAAWK,QAAST,GAgBtD,OAdAvX,EAAAA,EAAU4F,EAAU,SAAU6P,GAC5B,IAAIvJ,EACJlM,EAAAA,EAAUyV,EAAO,SAAU3V,GACzB,IAAImY,EAAQlU,EAAKjE,GAEjB,GADA4X,EAAW/W,QAAQsX,GACf/L,EAAG,CACL,IAAIgM,EAAQnU,EAAKmI,GACfiM,EAAUT,EAAWzW,KAAKiX,EAAOD,GACnCP,EAAWrW,QAAQ6W,EAAOD,EAAOvd,KAAKG,IAAI+c,EAAM1X,EAAGJ,EAAGoM,GAAIiM,GAAW,GACvE,CACAjM,EAAIpM,CACN,EACF,GAEO4X,CACT,CAtEaU,CAAgBlY,EAAG0F,EAAU7B,EAAMwT,GAC5C7Q,EAAa6Q,EAAa,aAAe,cAE3C,SAASc,EAAQC,EAAWC,GAI1B,IAHA,IAAI5V,EAAQ8U,EAAO/W,QACf8X,EAAO7V,EAAMiQ,MACbhQ,EAAU,CAAC,EACR4V,GACD5V,EAAQ4V,GACVF,EAAUE,IAEV5V,EAAQ4V,IAAQ,EAChB7V,EAAMnD,KAAKgZ,GACX7V,EAAQA,EAAMV,OAAOsW,EAAcC,KAGrCA,EAAO7V,EAAMiQ,KAEjB,CA6BA,OARAyF,EAlBA,SAAeG,GACbhB,EAAGgB,GAAQf,EAAOpV,QAAQmW,GAAMC,OAAO,SAAU7N,EAAK7J,GACpD,OAAOrG,KAAKG,IAAI+P,EAAK4M,EAAGzW,EAAEjB,GAAK2X,EAAOxW,KAAKF,GAC7C,EAAG,EACL,EAce0W,EAAOtD,aAAaxJ,KAAK8M,IACxCY,EAZA,SAAeG,GACb,IAAI/F,EAAMgF,EAAOtV,SAASqW,GAAMC,OAAO,SAAU7N,EAAK7J,GACpD,OAAOrG,KAAK+X,IAAI7H,EAAK4M,EAAGzW,EAAEG,GAAKuW,EAAOxW,KAAKF,GAC7C,EAAGoH,OAAOC,mBAEN9G,EAAOpB,EAAEoB,KAAKkX,GACd/F,IAAQtK,OAAOC,mBAAqB9G,EAAKoF,aAAeA,IAC1D8Q,EAAGgB,GAAQ9d,KAAKG,IAAI2c,EAAGgB,GAAO/F,GAElC,EAGegF,EAAOhN,WAAWE,KAAK8M,IAGtCzX,EAAAA,EAAUsX,EAAO,SAAUxX,GACzB0X,EAAG1X,GAAK0X,EAAGzT,EAAKjE,GAClB,GAEO0X,CACT,CAqFA,SAASkB,GAAUxY,GACjB,IAIIyY,EAJA/S,EAAWgB,EAAsB1G,GACjCqW,EAAYvW,EAAAA,EAAQsW,GAAmBpW,EAAG0F,GAzQhD,SAA4B1F,EAAG0F,GAC7B,IAAI2Q,EAAY,CAAC,EAEjB,SAASqC,EAAKC,EAAO1H,EAAU2H,EAAUC,EAAiBC,GACxD,IAAIlZ,EACJE,EAAAA,EAAUA,EAAAA,EAAQmR,EAAU2H,GAAW,SAAU9W,GAC/ClC,EAAI+Y,EAAM7W,GACN9B,EAAEoB,KAAKxB,GAAGwE,OACZtE,EAAAA,EAAUE,EAAEiU,aAAarU,GAAI,SAAUoM,GACrC,IAAI+M,EAAQ/Y,EAAEoB,KAAK4K,GACf+M,EAAM3U,QAAU2U,EAAMlT,MAAQgT,GAAmBE,EAAMlT,MAAQiT,IACjE9B,GAAYX,EAAWrK,EAAGpM,EAE9B,EAEJ,EACF,CAyBA,OADAE,GAAAA,EAAS4F,EAtBT,SAAoBsT,EAAOL,GACzB,IACEM,EADEC,GAAgB,EAElBjI,EAAW,EAgBb,OAdAnR,EAAAA,EAAU6Y,EAAO,SAAU/Y,EAAGuZ,GAC5B,GAAwB,WAApBnZ,EAAEoB,KAAKxB,GAAGwE,MAAoB,CAChC,IAAI6P,EAAejU,EAAEiU,aAAarU,GAC9BqU,EAAahZ,SACfge,EAAejZ,EAAEoB,KAAK6S,EAAa,IAAIpO,MACvC6S,EAAKC,EAAO1H,EAAUkI,EAAgBD,EAAcD,GAEpDhI,EAAWkI,EACXD,EAAeD,EAEnB,CACAP,EAAKC,EAAO1H,EAAU0H,EAAM1d,OAAQge,EAAcD,EAAM/d,OAC1D,GAEO0d,CACT,GAGOtC,CACT,CA+N2D+C,CAAmBpZ,EAAG0F,IAE3E2T,EAAM,CAAC,EAEXvZ,EAAAA,EAAU,CAAC,IAAK,KAAM,SAAUwZ,GAC9Bb,EAA4B,MAATa,EAAe5T,EAAW5F,GAAAA,EAAS4F,GAAUiN,UAChE7S,EAAAA,EAAU,CAAC,IAAK,KAAM,SAAUyZ,GAChB,MAAVA,IACFd,EAAmB3Y,EAAAA,EAAM2Y,EAAkB,SAAUe,GACnD,OAAO1Z,GAAAA,EAAS0Z,GAAO7G,SACzB,IAGF,IAAI8G,GAAuB,MAATH,EAAetZ,EAAEiU,aAAejU,EAAEuK,YAAYE,KAAKzK,GACjEoX,EApMV,SAA2BpX,EAAG0F,EAAU2Q,EAAWoD,GACjD,IAAI5V,EAAO,CAAC,EACVuT,EAAQ,CAAC,EACTjG,EAAM,CAAC,EAkCT,OA7BArR,EAAAA,EAAU4F,EAAU,SAAU6P,GAC5BzV,EAAAA,EAAUyV,EAAO,SAAU3V,EAAGiG,GAC5BhC,EAAKjE,GAAKA,EACVwX,EAAMxX,GAAKA,EACXuR,EAAIvR,GAAKiG,CACX,EACF,GAEA/F,EAAAA,EAAU4F,EAAU,SAAU6P,GAC5B,IAAImE,GAAW,EACf5Z,EAAAA,EAAUyV,EAAO,SAAU3V,GACzB,IAAI+Z,EAAKF,EAAW7Z,GACpB,GAAI+Z,EAAG1e,OAAQ,CACb0e,EAAK7Z,GAAS6Z,EAAI,SAAU3Y,GAC1B,OAAOmQ,EAAInQ,EACb,GAEA,IADA,IAAI4Y,GAAMD,EAAG1e,OAAS,GAAK,EAClB6G,EAAItH,KAAKqf,MAAMD,GAAKE,EAAKtf,KAAKC,KAAKmf,GAAK9X,GAAKgY,IAAMhY,EAAG,CAC7D,IAAId,EAAI2Y,EAAG7X,GACPsV,EAAMxX,KAAOA,GAAK8Z,EAAUvI,EAAInQ,KAAOkW,GAAYb,EAAWzW,EAAGoB,KACnEoW,EAAMpW,GAAKpB,EACXwX,EAAMxX,GAAKiE,EAAKjE,GAAKiE,EAAK7C,GAC1B0Y,EAAUvI,EAAInQ,GAElB,CACF,CACF,EACF,GAEO,CAAE6C,KAAMA,EAAMuT,MAAOA,EAC9B,CA8JkB2C,CAAkB/Z,EAAGyY,EAAkBpC,EAAWoD,GAC1DnC,EAAKH,GAAqBnX,EAAGyY,EAAkBrB,EAAMvT,KAAMuT,EAAMA,MAAiB,MAAVmC,GAC9D,MAAVA,IACFjC,EAAKxX,EAAYwX,EAAI,SAAUtS,GAC7B,OAAQA,CACV,IAEFqU,EAAIC,EAAOC,GAASjC,CACtB,EACF,GAEA,IAAI0C,EArFN,SAAoCha,EAAGqZ,GACrC,OAAOvZ,EAAQA,GAAAA,EAASuZ,GAAM,SAAU/B,GACtC,IAAI3c,EAAMsN,OAAOgS,kBACb1H,EAAMtK,OAAOC,kBASjB,OAPApI,GAAQwX,EAAI,SAAUtS,EAAGpF,GACvB,IAAIsa,EAkIV,SAAela,EAAGJ,GAChB,OAAOI,EAAEoB,KAAKxB,GAAGwF,KACnB,CApIsBA,CAAMpF,EAAGJ,GAAK,EAE9BjF,EAAMH,KAAKG,IAAIqK,EAAIkV,EAAWvf,GAC9B4X,EAAM/X,KAAK+X,IAAIvN,EAAIkV,EAAW3H,EAChC,GAEO5X,EAAM4X,CACf,EACF,CAuEsB4H,CAA2Bna,EAAGqZ,GAElD,OAhEF,SAA0BA,EAAKe,GAC7B,IAAIC,EAAcva,GAAAA,EAASsa,GACzBE,EAAaxa,EAAMua,GACnBE,EAAaza,EAAMua,GAErBva,EAAAA,EAAU,CAAC,IAAK,KAAM,SAAUwZ,GAC9BxZ,EAAAA,EAAU,CAAC,IAAK,KAAM,SAAUyZ,GAC9B,IAEElR,EAFEmS,EAAYlB,EAAOC,EACrBjC,EAAK+B,EAAImB,GAEX,GAAIlD,IAAO8C,EAAX,CAEA,IAAIK,EAAS3a,GAAAA,EAASwX,IACtBjP,EAAkB,MAAVkR,EAAgBe,EAAaxa,EAAM2a,GAAUF,EAAaza,EAAM2a,MAGtEpB,EAAImB,GAAa1a,EAAYwX,EAAI,SAAUtS,GACzC,OAAOA,EAAIqD,CACb,GARwB,CAU5B,EACF,EACF,CAyCEqS,CAAiBrB,EAAKW,GAvCxB,SAAiBX,EAAKjC,GACpB,OAAOtX,EAAYuZ,EAAIsB,GAAI,SAAUC,EAAQhb,GAC3C,GAAIwX,EACF,OAAOiC,EAAIjC,EAAMrQ,eAAenH,GAEhC,IAAI0X,EAAKxX,GAASA,EAAAA,EAAMuZ,EAAKzZ,IAC7B,OAAQ0X,EAAG,GAAKA,EAAG,IAAM,CAE7B,EACF,CA+BSuD,CAAQxB,EAAKrZ,EAAEyB,QAAQ2V,MAChC,CC9WA,SAAS0D,GAAS9a,IASlB,SAAmBA,GACjB,IAAI0F,EAAWgB,EAAsB1G,GACjC+a,EAAU/a,EAAEyB,QAAQuZ,QACpBC,EAAQ,EACZnb,EAAAA,EAAU4F,EAAU,SAAU6P,GAC5B,IAAI2F,EAAYpb,EACdA,EAAAA,EAAMyV,EAAO,SAAU3V,GACrB,OAAOI,EAAEoB,KAAKxB,GAAG0F,MACnB,IAEFxF,EAAAA,EAAUyV,EAAO,SAAU3V,GACzBI,EAAEoB,KAAKxB,GAAGqF,EAAIgW,EAAQC,EAAY,CACpC,GACAD,GAASC,EAAYH,CACvB,EACF,EArBEI,CAFAnb,EAAI0G,EAAwB1G,IAG5BF,GAAS0Y,GAAUxY,GAAI,SAAUgF,EAAGpF,GAClCI,EAAEoB,KAAKxB,GAAGoF,EAAIA,CAChB,EACF,CCEA,SAASoW,GAAOpb,EAAGqb,GACjB,IAAIrV,EAAOqV,GAAQA,EAAKC,YAAc5U,EAAYA,EAClDV,EAAK,SAAU,WACb,IAAIuV,EAAcvV,EAAK,qBAAsB,WAC3C,OA0JN,SAA0BwV,GACxB,IAAIxb,EAAI,IAAIK,EAAAA,EAAM,CAAEkE,YAAY,EAAMuK,UAAU,IAC5CrN,EAAQga,GAAaD,EAAW/Z,SAoBpC,OAlBAzB,EAAEyE,SACA3E,EAAAA,EAAQ,CAAC,EAAG4b,GAAeC,GAAkBla,EAAOma,IAAgB9b,EAAAA,EAAO2B,EAAOoa,MAGpF/b,EAAAA,EAAU0b,EAAWhb,QAAS,SAAUZ,GACtC,IAAIwB,EAAOqa,GAAaD,EAAWpa,KAAKxB,IACxCI,EAAES,QAAQb,EAAGE,EAAAA,EAAW6b,GAAkBva,EAAM0a,IAAeC,KAC/D/b,EAAE2G,UAAU/G,EAAG4b,EAAW/P,OAAO7L,GACnC,GAEAE,EAAAA,EAAU0b,EAAW5a,QAAS,SAAUC,GACtC,IAAIE,EAAO0a,GAAaD,EAAWza,KAAKF,IACxCb,EAAEmB,QACAN,EACAf,EAAAA,EAAQ,CAAC,EAAGkc,GAAcL,GAAkB5a,EAAMkb,IAAenc,EAAAA,EAAOiB,EAAMmb,KAElF,GAEOlc,CACT,CAjLamc,CAAiBnc,EAC1B,GACAgG,EAAK,cAAe,YASxB,SAAmBhG,EAAGgG,GACpBA,EAAK,6BAA8B,YA+KrC,SAAgChG,GAC9B,IAAIyB,EAAQzB,EAAEyB,QACdA,EAAMuZ,SAAW,EACjBlb,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GAClBE,EAAKiH,QAAU,EACqB,MAAhCjH,EAAK8G,SAASd,gBACM,OAAlBtF,EAAMqF,SAAsC,OAAlBrF,EAAMqF,QAClC/F,EAAKqE,OAASrE,EAAKqb,YAEnBrb,EAAKuE,QAAUvE,EAAKqb,YAG1B,EACF,CA5LIC,CAAuBrc,EACzB,GACAgG,EAAK,sBAAuB,YAqW9B,SAAyBhG,GACvBF,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,GAAIA,EAAEjB,IAAMiB,EAAEG,EAAG,CACf,IAAII,EAAOpB,EAAEoB,KAAKP,EAAEjB,GACfwB,EAAKkb,YACRlb,EAAKkb,UAAY,IAEnBlb,EAAKkb,UAAUhd,KAAK,CAAEuB,EAAGA,EAAGgC,MAAO7C,EAAEe,KAAKF,KAC1Cb,EAAE8C,WAAWjC,EACf,CACF,EACF,CA/WI0b,CAAgBvc,EAClB,GACAgG,EAAK,cAAe,WAClBwW,EAAYxc,EACd,GACAgG,EAAK,uBAAwB,WAC3ByW,GAAiBzc,EACnB,GACAgG,EAAK,WAAY,WACfJ,GAAKc,EAAwB1G,GAC/B,GACAgG,EAAK,6BAA8B,YAsLrC,SAAgChG,GAC9BF,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GAClB,GAAIE,EAAKqE,OAASrE,EAAKuE,OAAQ,CAC7B,IAAI1F,EAAII,EAAEoB,KAAKP,EAAEjB,GAEbiD,EAAQ,CAAE+C,MADN5F,EAAEoB,KAAKP,EAAEG,GACM4E,KAAOhG,EAAEgG,MAAQ,EAAIhG,EAAEgG,KAAM/E,EAAGA,GACvD6F,EAAkB1G,EAAG,aAAc6C,EAAO,MAC5C,CACF,EACF,CA/LI6Z,CAAuB1c,EACzB,GACAgG,EAAK,uBAAwB,Y7CmH/B,SAA0BhG,GAExB,IAAI2c,EAAS7c,EACXA,EAAAA,EAAME,EAAEQ,QAAS,SAAUZ,GACzB,OAAOI,EAAEoB,KAAKxB,GAAGgG,IACnB,IAGE4O,EAAS,GACb1U,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIgG,EAAO5F,EAAEoB,KAAKxB,GAAGgG,KAAO+W,EACvBnI,EAAO5O,KACV4O,EAAO5O,GAAQ,IAEjB4O,EAAO5O,GAAMtG,KAAKM,EACpB,GAEA,IAAIyI,EAAQ,EACR0F,EAAiB/N,EAAEyB,QAAQsM,eAC/BjO,EAAAA,EAAU0U,EAAQ,SAAUpK,EAAItI,GAC1BhC,EAAAA,EAAcsK,IAAOtI,EAAIiM,IAAmB,IAC5C1F,EACOA,GACTvI,EAAAA,EAAUsK,EAAI,SAAUxK,GACtBI,EAAEoB,KAAKxB,GAAGgG,MAAQyC,CACpB,EAEJ,EACF,C6C9II3B,CAAsB1G,EACxB,GACAgG,EAAK,2BAA4B,YvB0EnC,SAAiBhG,GACf,IAAIyX,EAAazX,EAAEyB,QACnBzB,EAAE6B,WAAW4V,EAAW5J,oBACjB4J,EAAW5J,YAClB/N,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAClBb,EAAEe,KAAKF,GACT2N,aACPxO,EAAE8C,WAAWjC,EAEjB,EACF,CuBnFI4b,CAAqBzc,EACvB,GACAgG,EAAK,qBAAsB,Y7C+F7B,SAAwBhG,GACtB,IAAIuS,EAAMzS,EACRA,EAAAA,EAAME,EAAEQ,QAAS,SAAUZ,GACzB,OAAOI,EAAEoB,KAAKxB,GAAGgG,IACnB,IAEF9F,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GACdE,EAAAA,EAAMsB,EAAM,UACdA,EAAKwE,MAAQ2M,EAEjB,EACF,C6C1GI7L,CAAoB1G,EACtB,GACAgG,EAAK,uBAAwB,YAsL/B,SAA0BhG,GACxB,IAAI2F,EAAU,EACd7F,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GACdwB,EAAK8M,YACP9M,EAAK4N,QAAUhP,EAAEoB,KAAKA,EAAK8M,WAAWtI,KACtCxE,EAAKuE,QAAU3F,EAAEoB,KAAKA,EAAK+M,cAAcvI,KAEzCD,EAAU7F,EAAM6F,EAASvE,EAAKuE,SAElC,GACA3F,EAAEyB,QAAQkE,QAAUA,CACtB,CAjMIiX,CAAiB5c,EACnB,GACAgG,EAAK,6BAA8B,YAiMrC,SAAgChG,GAC9BF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GACC,eAAfwB,EAAKgD,QACPpE,EAAEe,KAAKK,EAAKP,GAAG8G,UAAYvG,EAAKwE,KAChC5F,EAAE6B,WAAWjC,GAEjB,EACF,CAxMIid,CAAuB7c,EACzB,GACAgG,EAAK,oBAAqB,WACxB8W,EAAc9c,EAChB,GACAgG,EAAK,wBAAyB,WAC5BwP,GAAkBxV,EACpB,GACAgG,EAAK,wBAAyB,Y5CjEhC,SAA2BhG,GAkBzBF,EAAAA,EAAUE,EAAE0E,WAjBZ,SAAS/B,EAAI/C,GACX,IAAI8E,EAAW1E,EAAE0E,SAAS9E,GACtBwB,EAAOpB,EAAEoB,KAAKxB,GAKlB,GAJI8E,EAASzJ,QACX6E,EAAAA,EAAU4E,EAAU/B,GAGlB7C,EAAAA,EAAMsB,EAAM,WAAY,CAC1BA,EAAK6N,WAAa,GAClB7N,EAAK8N,YAAc,GACnB,IAAK,IAAItJ,EAAOxE,EAAK4N,QAASrJ,EAAUvE,EAAKuE,QAAU,EAAGC,EAAOD,IAAWC,EAC1EE,EAAc9F,EAAG,aAAc,MAAOJ,EAAGwB,EAAMwE,GAC/CE,EAAc9F,EAAG,cAAe,MAAOJ,EAAGwB,EAAMwE,EAEpD,CACF,EAGF,C4C+CImX,CAAkB/c,EACpB,GACAgG,EAAK,YAAa,WAChBH,GAAM7F,EACR,GACAgG,EAAK,sBAAuB,YAwU9B,SAAyBhG,GACvB,IAAIwU,EAAS9N,EAAsB1G,GACnCF,EAAAA,EAAU0U,EAAQ,SAAUe,GAC1B,IAAIyH,EAAa,EACjBld,EAAAA,EAAUyV,EAAO,SAAU3V,EAAGkC,GAC5B,IAAIV,EAAOpB,EAAEoB,KAAKxB,GAClBwB,EAAKyE,MAAQ/D,EAAIkb,EACjBld,EAAAA,EAAUsB,EAAKkb,UAAW,SAAUW,GAClCvW,EACE1G,EACA,WACA,CACEoF,MAAO6X,EAASpa,MAAMuC,MACtBE,OAAQ2X,EAASpa,MAAMyC,OACvBM,KAAMxE,EAAKwE,KACXC,MAAO/D,KAAMkb,EACbnc,EAAGoc,EAASpc,EACZgC,MAAOoa,EAASpa,OAElB,MAEJ,UACOzB,EAAKkb,SACd,EACF,EACF,CAhWIY,CAAgBld,EAClB,GACAgG,EAAK,6BAA8B,Y3C3ErC,SAAgBhG,GACd,IAAI6G,EAAU7G,EAAEyB,QAAQqF,QAAQC,cAChB,OAAZF,GAAgC,OAAZA,GACtBQ,EAAgBrH,EAEpB,C2CuEImd,CAAwBnd,EAC1B,GACAgG,EAAK,eAAgB,WACnB8U,GAAS9a,EACX,GACAgG,EAAK,wBAAyB,YA0VhC,SAA2BhG,GACzBF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GAClB,GAAmB,aAAfwB,EAAKgD,MAAsB,CAC7B,IAAIgZ,EAAWpd,EAAEoB,KAAKA,EAAKP,EAAEjB,GACzBoF,EAAIoY,EAASpY,EAAIoY,EAAShY,MAAQ,EAClCH,EAAImY,EAASnY,EACbC,EAAK9D,EAAK4D,EAAIA,EACdG,EAAKiY,EAAS9X,OAAS,EAC3BtF,EAAEmB,QAAQC,EAAKP,EAAGO,EAAKyB,OACvB7C,EAAE6B,WAAWjC,GACbwB,EAAKyB,MAAMoE,OAAS,CAClB,CAAEjC,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,GAC9B,CAAEH,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,GAC9B,CAAEH,EAAGA,EAAIE,EAAID,EAAGA,GAChB,CAAED,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,GAC9B,CAAEH,EAAGA,EAAK,EAAIE,EAAM,EAAGD,EAAGA,EAAIE,IAEhC/D,EAAKyB,MAAMmC,EAAI5D,EAAK4D,EACpB5D,EAAKyB,MAAMoC,EAAI7D,EAAK6D,CACtB,CACF,EACF,CA/WIoY,CAAkBrd,EACpB,GACAgG,EAAK,wBAAyB,YAwRhC,SAA2BhG,GACzBF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,GAAII,EAAE0E,SAAS9E,GAAG3E,OAAQ,CACxB,IAAImG,EAAOpB,EAAEoB,KAAKxB,GACd0I,EAAItI,EAAEoB,KAAKA,EAAK8M,WAChBoP,EAAItd,EAAEoB,KAAKA,EAAK+M,cAChBoP,EAAIvd,EAAEoB,KAAKtB,EAAOsB,EAAK6N,aACvBuO,EAAIxd,EAAEoB,KAAKtB,EAAOsB,EAAK8N,cAE3B9N,EAAKgE,MAAQ5K,KAAKgL,IAAIgY,EAAExY,EAAIuY,EAAEvY,GAC9B5D,EAAKkE,OAAS9K,KAAKgL,IAAI8X,EAAErY,EAAIqD,EAAErD,GAC/B7D,EAAK4D,EAAIuY,EAAEvY,EAAI5D,EAAKgE,MAAQ,EAC5BhE,EAAK6D,EAAIqD,EAAErD,EAAI7D,EAAKkE,OAAS,CAC/B,CACF,GAEAxF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GACL,WAApBI,EAAEoB,KAAKxB,GAAGwE,OACZpE,EAAE6B,WAAWjC,EAEjB,EACF,CA5SI6d,CAAkBzd,EACpB,GACAgG,EAAK,qBAAsB,Y1CrB7B,SAAchG,GACZF,EAAAA,EAAUE,EAAEyB,QAAQ8F,YAAa,SAAU3H,GACzC,IAEIoB,EAFAI,EAAOpB,EAAEoB,KAAKxB,GACd8d,EAAYtc,EAAKsG,UAGrB,IADA1H,EAAEmB,QAAQC,EAAKwG,QAAS8V,GACjBtc,EAAKgD,OACVpD,EAAIhB,EAAEuK,WAAW3K,GAAG,GACpBI,EAAE6B,WAAWjC,GACb8d,EAAUzW,OAAO3H,KAAK,CAAE0F,EAAG5D,EAAK4D,EAAGC,EAAG7D,EAAK6D,IACxB,eAAf7D,EAAKgD,QACPsZ,EAAU1Y,EAAI5D,EAAK4D,EACnB0Y,EAAUzY,EAAI7D,EAAK6D,EACnByY,EAAUtY,MAAQhE,EAAKgE,MACvBsY,EAAUpY,OAASlE,EAAKkE,QAE1B1F,EAAIoB,EACJI,EAAOpB,EAAEoB,KAAKxB,EAElB,EACF,C0CEIkd,CAAe9c,EACjB,GACAgG,EAAK,2BAA4B,YAsPnC,SAA8BhG,GAC5BF,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GAClB,GAAIf,EAAAA,EAAMiB,EAAM,KAId,OAHsB,MAAlBA,EAAK8G,UAAsC,MAAlB9G,EAAK8G,WAChC9G,EAAKqE,OAASrE,EAAKqb,aAEbrb,EAAK8G,UACX,IAAK,IACH9G,EAAKiE,GAAKjE,EAAKqE,MAAQ,EAAIrE,EAAKqb,YAChC,MACF,IAAK,IACHrb,EAAKiE,GAAKjE,EAAKqE,MAAQ,EAAIrE,EAAKqb,YAIxC,EACF,CAtQIuB,CAAqB3d,EACvB,GACAgG,EAAK,2BAA4B,WAC/BmX,EAAsBnd,EACxB,GACAgG,EAAK,qBAAsB,YAoK7B,SAAwBhG,GACtB,IAAI4d,EAAO3V,OAAOC,kBACd2V,EAAO,EACPC,EAAO7V,OAAOC,kBACd6V,EAAO,EACPtG,EAAazX,EAAEyB,QACfuc,EAAUvG,EAAWwG,SAAW,EAChCC,EAAUzG,EAAW0G,SAAW,EAEpC,SAASC,EAAYla,GACnB,IAAIc,EAAId,EAAMc,EACVC,EAAIf,EAAMe,EACVjE,EAAIkD,EAAMkB,MACVC,EAAInB,EAAMoB,OACdsY,EAAOpjB,KAAK+X,IAAIqL,EAAM5Y,EAAIhE,EAAI,GAC9B6c,EAAOrjB,KAAKG,IAAIkjB,EAAM7Y,EAAIhE,EAAI,GAC9B8c,EAAOtjB,KAAK+X,IAAIuL,EAAM7Y,EAAII,EAAI,GAC9B0Y,EAAOvjB,KAAKG,IAAIojB,EAAM9Y,EAAII,EAAI,EAChC,CAEAvF,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7Bwe,EAAYpe,EAAEoB,KAAKxB,GACrB,GACAE,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GACdf,EAAAA,EAAMiB,EAAM,MACdqd,EAAYrd,EAEhB,GAEA6c,GAAQI,EACRF,GAAQI,EAERpe,EAAAA,EAAUE,EAAEQ,QAAS,SAAUZ,GAC7B,IAAIwB,EAAOpB,EAAEoB,KAAKxB,GAClBwB,EAAK4D,GAAK4Y,EACVxc,EAAK6D,GAAK6Y,CACZ,GAEAhe,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GAClBf,EAAAA,EAAUiB,EAAKkG,OAAQ,SAAUoX,GAC/BA,EAAErZ,GAAK4Y,EACPS,EAAEpZ,GAAK6Y,CACT,GACIhe,EAAAA,EAAMiB,EAAM,OACdA,EAAKiE,GAAK4Y,GAER9d,EAAAA,EAAMiB,EAAM,OACdA,EAAKkE,GAAK6Y,EAEd,GAEArG,EAAWrS,MAAQyY,EAAOD,EAAOI,EACjCvG,EAAWnS,OAASyY,EAAOD,EAAOI,CACpC,CA1NII,CAAete,EACjB,GACAgG,EAAK,2BAA4B,YA0NnC,SAA8BhG,GAC5BF,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAGI0d,EAAIC,EAHJzd,EAAOf,EAAEe,KAAKF,GACd4d,EAAQze,EAAEoB,KAAKP,EAAEjB,GACjB8e,EAAQ1e,EAAEoB,KAAKP,EAAEG,GAEhBD,EAAKkG,QAKRsX,EAAKxd,EAAKkG,OAAO,GACjBuX,EAAKzd,EAAKkG,OAAOlG,EAAKkG,OAAOhM,OAAS,KALtC8F,EAAKkG,OAAS,GACdsX,EAAKG,EACLF,EAAKC,GAKP1d,EAAKkG,OAAO0X,QAAQjY,EAAmB+X,EAAOF,IAC9Cxd,EAAKkG,OAAO3H,KAAKoH,EAAmBgY,EAAOF,GAC7C,EACF,CA1OII,CAAqB5e,EACvB,GACAgG,EAAK,oBAAqB,YA6P5B,SAAuChG,GACrCF,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIE,EAAOf,EAAEe,KAAKF,GACdE,EAAKkC,UACPlC,EAAKkG,OAAO0L,SAEhB,EACF,CAnQIkM,CAA8B7e,EAChC,GACAgG,EAAK,mBAAoB,YtD9D3B,SAAchG,GACZF,EAAAA,EAAUE,EAAEY,QAAS,SAAUC,GAC7B,IAAIgC,EAAQ7C,EAAEe,KAAKF,GACnB,GAAIgC,EAAMI,SAAU,CAClBjD,EAAE8C,WAAWjC,GAEb,IAAIkC,EAAcF,EAAME,mBACjBF,EAAMI,gBACNJ,EAAME,YACb/C,EAAEmB,QAAQN,EAAEG,EAAGH,EAAEjB,EAAGiD,EAAOE,EAC7B,CACF,EACF,CsDmDIyZ,CAAaxc,EACf,EACF,CA1FM8e,CAAUvD,EAAavV,EACzB,GACAA,EAAK,qBAAsB,YAgG/B,SAA0BwV,EAAYD,GACpCzb,EAAAA,EAAU0b,EAAWhb,QAAS,SAAUZ,GACtC,IAAImf,EAAavD,EAAWpa,KAAKxB,GAC7Bof,EAAczD,EAAYna,KAAKxB,GAE/Bmf,IACFA,EAAW/Z,EAAIga,EAAYha,EAC3B+Z,EAAW9Z,EAAI+Z,EAAY/Z,EAEvBsW,EAAY7W,SAAS9E,GAAG3E,SAC1B8jB,EAAW3Z,MAAQ4Z,EAAY5Z,MAC/B2Z,EAAWzZ,OAAS0Z,EAAY1Z,QAGtC,GAEAxF,EAAAA,EAAU0b,EAAW5a,QAAS,SAAUC,GACtC,IAAIke,EAAavD,EAAWza,KAAKF,GAC7Bme,EAAczD,EAAYxa,KAAKF,GAEnCke,EAAW9X,OAAS+X,EAAY/X,OAC5BnH,EAAAA,EAAMkf,EAAa,OACrBD,EAAW/Z,EAAIga,EAAYha,EAC3B+Z,EAAW9Z,EAAI+Z,EAAY/Z,EAE/B,GAEAuW,EAAW/Z,QAAQ2D,MAAQmW,EAAY9Z,QAAQ2D,MAC/CoW,EAAW/Z,QAAQ6D,OAASiW,EAAY9Z,QAAQ6D,MAClD,CA5HM2Z,CAAiBjf,EAAGub,EACtB,EACF,EACF,CA2HA,IAAIK,GAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,WAC7DF,GAAgB,CAAEV,QAAS,GAAIlD,QAAS,GAAID,QAAS,GAAI/Q,QAAS,MAClE+U,GAAa,CAAC,YAAa,SAAU,UAAW,SAChDC,GAAe,CAAC,QAAS,UACzBC,GAAe,CAAE3W,MAAO,EAAGE,OAAQ,GACnC2W,GAAe,CAAC,SAAU,SAAU,QAAS,SAAU,eACvDD,GAAe,CACjBhU,OAAQ,EACR/G,OAAQ,EACRmE,MAAO,EACPE,OAAQ,EACR8W,YAAa,GACbvU,SAAU,KAERqU,GAAY,CAAC,YAkSjB,SAASP,GAAkBuD,EAAKhb,GAC9B,OAAOpE,EAAYA,EAAAA,EAAOof,EAAKhb,GAAQ+D,OACzC,CAEA,SAASwT,GAAavX,GACpB,IAAIib,EAAW,CAAC,EAIhB,OAHArf,EAAAA,EAAUoE,EAAO,SAAUtE,EAAGD,GAC5Bwf,EAASxf,EAAEoH,eAAiBnH,CAC9B,GACOuf,CACT,C,kCChdA,IAAIC,EAAe,KAiBnB,QAPA,SAAyBC,GAGvB,IAFA,IAAIrkB,EAAQqkB,EAAOpkB,OAEZD,KAAWokB,EAAaE,KAAKD,EAAOE,OAAOvkB,MAClD,OAAOA,CACT,ECbA,IAAIwkB,EAAc,OAelB,QANA,SAAkBH,GAChB,OAAOA,EACHA,EAAO/T,MAAM,EAAGmU,EAAgBJ,GAAU,GAAGK,QAAQF,EAAa,IAClEH,CACN,E,wBCRIM,EAAa,qBAGbC,EAAa,aAGbC,EAAY,cAGZC,EAAeC,SA8CnB,QArBA,SAAkBpkB,GAChB,GAAoB,iBAATA,EACT,OAAOA,EAET,IAAI0H,EAAAA,EAAAA,GAAS1H,GACX,OA1CM,IA4CR,IAAIE,EAAAA,EAAAA,GAASF,GAAQ,CACnB,IAAI2H,EAAgC,mBAAjB3H,EAAMqkB,QAAwBrkB,EAAMqkB,UAAYrkB,EACnEA,GAAQE,EAAAA,EAAAA,GAASyH,GAAUA,EAAQ,GAAMA,CAC3C,CACA,GAAoB,iBAAT3H,EACT,OAAiB,IAAVA,EAAcA,GAASA,EAEhCA,EAAQskB,EAAStkB,GACjB,IAAIukB,EAAWN,EAAWN,KAAK3jB,GAC/B,OAAQukB,GAAYL,EAAUP,KAAK3jB,GAC/BmkB,EAAankB,EAAM2P,MAAM,GAAI4U,EAAW,EAAI,GAC3CP,EAAWL,KAAK3jB,GAvDb,KAuD6BA,CACvC,EC1DA,IAAIwkB,EAAW,IAsCf,QAZA,SAAkBxkB,GAChB,OAAKA,GAGLA,EAAQykB,EAASzkB,MACHwkB,GAAYxkB,KAAU,IA9BpB,uBA+BFA,EAAQ,GAAK,EAAI,GAGxBA,IAAUA,EAAQA,EAAQ,EAPd,IAAVA,EAAcA,EAAQ,CAQjC,C","sources":["../../node_modules/lodash-es/map.js","../../node_modules/lodash-es/_baseRange.js","../../node_modules/lodash-es/range.js","../../node_modules/lodash-es/_createRange.js","../../node_modules/lodash-es/_baseSet.js","../../node_modules/lodash-es/_basePickBy.js","../../node_modules/lodash-es/_basePick.js","../../node_modules/lodash-es/pick.js","../../node_modules/lodash-es/_flatRest.js","../../node_modules/lodash-es/_baseMap.js","../../node_modules/lodash-es/uniqueId.js","../../node_modules/lodash-es/flatten.js","../../node_modules/lodash-es/defaults.js","../../node_modules/dagre-d3-es/src/dagre/data/list.js","../../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../../node_modules/dagre-d3-es/src/dagre/acyclic.js","../../node_modules/lodash-es/_baseExtremum.js","../../node_modules/lodash-es/_baseGt.js","../../node_modules/lodash-es/max.js","../../node_modules/lodash-es/last.js","../../node_modules/lodash-es/mapValues.js","../../node_modules/lodash-es/_baseLt.js","../../node_modules/lodash-es/min.js","../../node_modules/lodash-es/now.js","../../node_modules/dagre-d3-es/src/dagre/util.js","../../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../../node_modules/dagre-d3-es/src/dagre/normalize.js","../../node_modules/lodash-es/minBy.js","../../node_modules/dagre-d3-es/src/dagre/rank/util.js","../../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../../node_modules/lodash-es/_createFind.js","../../node_modules/lodash-es/toInteger.js","../../node_modules/lodash-es/findIndex.js","../../node_modules/lodash-es/find.js","../../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","../../node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","../../node_modules/lodash-es/_asciiSize.js","../../node_modules/lodash-es/_hasUnicode.js","../../node_modules/lodash-es/_unicodeSize.js","../../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../../node_modules/dagre-d3-es/src/dagre/rank/index.js","../../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../../node_modules/lodash-es/cloneDeep.js","../../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../../node_modules/lodash-es/_baseZipObject.js","../../node_modules/lodash-es/zipObject.js","../../node_modules/lodash-es/_baseSortBy.js","../../node_modules/lodash-es/_compareAscending.js","../../node_modules/lodash-es/_compareMultiple.js","../../node_modules/lodash-es/_baseOrderBy.js","../../node_modules/lodash-es/sortBy.js","../../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../../node_modules/dagre-d3-es/src/dagre/order/sort.js","../../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../../node_modules/dagre-d3-es/src/dagre/order/index.js","../../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../../node_modules/lodash-es/forOwn.js","../../node_modules/lodash-es/forIn.js","../../node_modules/dagre-d3-es/src/dagre/position/bk.js","../../node_modules/dagre-d3-es/src/dagre/position/index.js","../../node_modules/dagre-d3-es/src/dagre/layout.js","../../node_modules/lodash-es/_trimmedEndIndex.js","../../node_modules/lodash-es/_baseTrim.js","../../node_modules/lodash-es/toNumber.js","../../node_modules/lodash-es/toFinite.js"],"sourcesContent":["import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import basePickBy from './_basePickBy.js';\nimport hasIn from './hasIn.js';\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nexport default basePick;\n","import basePick from './_basePick.js';\nimport flatRest from './_flatRest.js';\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nexport default pick;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import baseProperty from './_baseProperty.js';\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nexport default asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nexport default unicodeSize;\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n"],"names":["collection","iteratee","isArray","arrayMap","baseMap","baseIteratee","nativeCeil","Math","ceil","nativeMax","max","start","end","step","fromRight","index","length","result","Array","isIterateeCall","undefined","toFinite","baseRange","createRange","object","path","value","customizer","isObject","castPath","lastIndex","nested","key","toKey","newValue","objValue","isIndex","assignValue","paths","predicate","baseGet","baseSet","basePickBy","hasIn","func","setToString","overRest","flatten","flatRest","basePick","isArrayLike","baseEach","idCounter","prefix","id","toString","array","baseFlatten","objectProto","Object","prototype","hasOwnProperty","baseRest","sources","guard","source","props","keysIn","propsIndex","propsLength","eq","call","List","constructor","sentinel","_next","_prev","this","_sentinel","dequeue","entry","unlink","enqueue","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","node","buckets","map","zeroIdx","assignBucket","graph","buildState","results","sinks","removeNode","i","concat","doGreedyFAS","outEdges","collectPredecessors","inEdges","uEntry","wEntry","run","fas","acyclicer","stack","visited","dfs","dfsFAS","label","removeEdge","forwardName","name","reversed","comparator","current","computed","isSymbol","other","baseExtremum","identity","baseGt","baseForOwn","baseAssignValue","baseLt","root","Date","now","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","order","addBorderNode","arguments","time","fn","console","log","notime","prop","sg","sgNode","borderType","prev","util","setParent","undo","rankDir","rankdir","toLowerCase","reverseYOne","points","reverseY","swapXYOne","swapXY","swapWidthHeight","swapWidthHeightOne","dummyChains","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","normalizeEdge","longestPath","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","findIndexFunc","fromIndex","iterable","keys","remainder","createFind","toInteger","baseFindIndex","baseProperty","RegExp","rsAstralRange","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","CycleException","vs","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","networkSimplex","simpleLabel","simplify","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg","slice","child","childLab","parent","cutvalue","calcCutValue","assignCutValue","childIsTail","graphEdge","cutValue","u","isOutEdge","pointsToHead","otherWeight","hasEdge","otherCutValue","tree","dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","f","flipped","updateRanks","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","depth","treeDepths","nodeSep","nestingRoot","sumWeights","nodeRankFactor","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","baseClone","CLONE_DEEP_FLAG","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","values","assignFunc","valsLength","baseZipObject","comparer","sort","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","orders","objCriteria","criteria","othCriteria","ordersLength","compareAscending","iteratees","baseUnary","baseSortBy","compareMultiple","baseOrderBy","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","forEach","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","sourceSet","handleIn","vEntry","merged","target","sum","min","mergeEntries","handleOut","pop","reverse","doResolveConflicts","biasRight","bias","parts","lhs","rhs","sortable","unsortable","vsIndex","consumeUnsortable","last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","expandSubgraphs","predecessors","blPred","brPred","downLayerGraphs","buildLayerGraphs","upLayerGraphs","simpleNodes","layers","orderedVs","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","ranks","layerGraphs","lg","sorted","rootPrev","prevChild","addSubgraphConstraints","layer","parentDummyChains","postorderNums","pathData","lca","vPath","wPath","findPath","pathIdx","pathV","ascending","castFunction","baseFor","findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","blockGraph","graphLabel","sepFn","edgeSep","sep","nodesep","edgesep","vRoot","uRoot","prevMax","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","reduce","positionX","adjustedLayering","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","findType2Conflicts","xss","vert","horiz","inner","neighborFn","prevIdx","ws","mp","floor","il","verticalAlignment","smallestWidth","NEGATIVE_INFINITY","halfWidth","findSmallestWidthAlignment","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","alignCoordinates","ul","ignore","balance","position","rankSep","ranksep","prevY","maxHeight","positionY","layout","opts","debugTiming","layoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","labeloffset","makeSpaceForEdgeLabels","selfEdges","removeSelfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","offset","assignRankMinMax","removeEdgeLabelProxies","normalize","addBorderSegments","orderShift","selfEdge","insertSelfEdges","coordinateSystem","selfNode","positionSelfEdges","b","l","r","removeBorderNodes","origLabel","fixupEdgeLabelCoords","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","translateGraph","p1","p2","nodeV","nodeW","unshift","assignNodeIntersects","reversePointsForReversedEdges","runLayout","inputLabel","layoutLabel","updateInputGraph","obj","newAttrs","reWhitespace","string","test","charAt","reTrimStart","trimmedEndIndex","replace","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber"],"sourceRoot":""}