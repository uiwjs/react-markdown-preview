{"version":3,"file":"static/js/661.3208c70e.chunk.js","mappings":"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","sources":["../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/micromark-util-chunked/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../../node_modules/micromark-util-character/index.js","../../node_modules/micromark-factory-space/index.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-util-normalize-identifier/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-util-classify-character/index.js","../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark-util-decode-numeric-character-reference/index.js","../../node_modules/micromark-util-decode-string/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/mermaid/dist/createText-6b48ae7d.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","import { l as log, M as decodeEntities } from \"./mermaid-f47111a7.js\";\nimport { fromMarkdown } from \"mdast-util-from-markdown\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown) {\n  const withoutMultipleNewlines = markdown.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  return withoutExtraSpaces;\n}\nfunction markdownToLines(markdown) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown);\n  const { children } = fromMarkdown(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.value.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"emphasis\") {\n      node.children.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    }\n  }\n  children.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.children.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    }\n  });\n  return lines;\n}\nfunction markdownToHTML(markdown) {\n  const { children } = fromMarkdown(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      return node.value.replace(/\\n/g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.children.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"emphasis\") {\n      return `<em>${node.children.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.children.map(output).join(\"\")}</p>`;\n    }\n    return `Unsupported markdown: ${node.type}`;\n  }\n  return children.map(output).join(\"\");\n}\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\nfunction addHtmlSpan(element, node, width, classes, addBackground = false) {\n  const fo = element.append(\"foreignObject\");\n  const div = fo.append(\"xhtml:div\");\n  const label = node.label;\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  div.html(\n    `\n    <span class=\"${labelClass} ${classes}\" ` + (node.labelStyle ? 'style=\"' + node.labelStyle + '\"' : \"\") + \">\" + label + \"</span>\"\n  );\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"max-width\", width + \"px\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  fo.style(\"width\", bbox.width);\n  fo.style(\"height\", bbox.height);\n  return fo.node();\n}\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  var _a;\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = (_a = testSpan.node()) == null ? void 0 : _a.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = (line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width;\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", -padding).attr(\"y\", -padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"emphasis\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\nconst createText = (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}) => {\n  log.info(\"createText\", text, style, isTitle, classes, useHtmlLabels, isNode, addSvgBackground);\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text);\n    const node = {\n      isNode,\n      label: decodeEntities(htmlText).replace(\n        /fa[blrs]?:fa-[\\w-]+/g,\n        // cspell: disable-line\n        (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n      ),\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = addHtmlSpan(el, node, width, classes, addSvgBackground);\n    return vertexNode;\n  } else {\n    const structuredText = markdownToLines(text);\n    const svgLabel = createFormattedText(width, el, structuredText, addSvgBackground);\n    return svgLabel;\n  }\n};\nexport {\n  createText as a,\n  computeDimensionOfText as c\n};\n"],"names":["emptyOptions","one","value","includeImageAlt","includeHtml","Boolean","node","type","alt","all","children","Array","isArray","values","result","index","length","join","splice","list","start","remove","items","end","parameters","chunkStart","from","unshift","slice","push","hasOwnProperty","syntaxExtension","extension","hook","left","call","undefined","right","code","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","String","fromCharCode","factorySpace","effects","ok","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","content","tokenize","contentStart","attempt","this","parser","contentInitial","lineStart","previous","token","contentType","next","data","document","self","stack","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","point","indexBeforeFlow","exitContainers","Object","assign","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","line","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","entry","nok","disable","null","includes","blankLine","after","partial","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","pop","chunkInside","contentEnd","continuationConstruct","contentContinue","resolve","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","string","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","column","_index","_bufferIndex","called","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","shift","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","name","create","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","replace","toLowerCase","toUpperCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","characterReference","numeric","decodeNamedCharacterReference","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","use","nextEvents","movePoint","htmlText","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","codeText","between","tailExitIndex","headEnterIndex","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","resolveText","parse","options","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","stringifyPosition","position","pos","own","fromMarkdown","encoding","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tree","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","key","and","errorHandler","onExitError","Error","settings","toString","lang","title","url","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","match","endPosition","lastIndex","exec","Math","ceil","preprocess","d","combined","markdownToLines","markdown","preprocessedMarkdown","withoutMultipleNewlines","dedent","preprocessMarkdown","lines","currentLine","processNode","parentType","arguments","split","forEach","textLine","word","contentNode","treeNode","splitWordToFitWidth","checkFit","splitWordToFitWidthRecursion","Intl","Segmenter","segment","s","usedChars","remainingChars","nextChar","rest","newWord","splitLineToFitWidth","some","_ref","splitLineToFitWidthRecursion","words","_words$shift","newLine","joiner","nextWord","lineWithNextWord","createTspan","textElement","lineHeight","append","attr","computeWidthOfText","parentNode","testElement","testSpan","updateTextContentAndStyles","textLength","getComputedTextLength","computeDimensionOfText","_a","textDimension","getBoundingClientRect","tspan","wrappedLine","innerTspan","createText","el","style","isTitle","classes","useHtmlLabels","isNode","width","addSvgBackground","log","output","concat","markdownToHTML","vertexNode","element","addBackground","fo","div","labelClass","dom","styleFn","labelStyle","bbox","height","addHtmlSpan","decodeEntities","svgLabel","g","structuredText","labelGroup","bkg","insert","checkWidth","line2","linesUnderWidth","preparedLine","getBBox","padding","createFormattedText"],"sourceRoot":""}