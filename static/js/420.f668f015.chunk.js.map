{"version":3,"file":"static/js/420.f668f015.chunk.js","mappings":"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","sources":["../../node_modules/mermaid/dist/stateDiagram-b620d43f.js"],"sourcesContent":["import { d as db, p as parser, s as styles } from \"./styles-bbc3fe3b.js\";\nimport { line, curveBasis, select } from \"d3\";\nimport { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { c as getConfig, u as utils, e as common, l as log, i as configureSvgSize } from \"./mermaid-934d9bea.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nconst idCache = {};\nconst set = (key, val) => {\n  idCache[key] = val;\n};\nconst get = (k) => idCache[k];\nconst keys = () => Object.keys(idCache);\nconst size = () => keys().length;\nconst idCache$1 = {\n  get,\n  set,\n  keys,\n  size\n};\nconst drawStartState = (g) => g.append(\"circle\").attr(\"class\", \"start-state\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit);\nconst drawDivider = (g) => g.append(\"line\").style(\"stroke\", \"grey\").style(\"stroke-dasharray\", \"3\").attr(\"x1\", getConfig().state.textHeight).attr(\"class\", \"divider\").attr(\"x2\", getConfig().state.textHeight * 2).attr(\"y1\", 0).attr(\"y2\", 0);\nconst drawSimpleState = (g, stateDef) => {\n  const state = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 2 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const classBox = state.node().getBBox();\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", classBox.width + 2 * getConfig().state.padding).attr(\"height\", classBox.height + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return state;\n};\nconst drawDescrState = (g, stateDef) => {\n  const addTspan = function(textEl, txt, isFirst2) {\n    const tSpan = textEl.append(\"tspan\").attr(\"x\", 2 * getConfig().state.padding).text(txt);\n    if (!isFirst2) {\n      tSpan.attr(\"dy\", getConfig().state.textHeight);\n    }\n  };\n  const title = g.append(\"text\").attr(\"x\", 2 * getConfig().state.padding).attr(\"y\", getConfig().state.textHeight + 1.3 * getConfig().state.padding).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.descriptions[0]);\n  const titleBox = title.node().getBBox();\n  const titleHeight = titleBox.height;\n  const description = g.append(\"text\").attr(\"x\", getConfig().state.padding).attr(\n    \"y\",\n    titleHeight + getConfig().state.padding * 0.4 + getConfig().state.dividerMargin + getConfig().state.textHeight\n  ).attr(\"class\", \"state-description\");\n  let isFirst = true;\n  let isSecond = true;\n  stateDef.descriptions.forEach(function(descr) {\n    if (!isFirst) {\n      addTspan(description, descr, isSecond);\n      isSecond = false;\n    }\n    isFirst = false;\n  });\n  const descrLine = g.append(\"line\").attr(\"x1\", getConfig().state.padding).attr(\"y1\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"y2\", getConfig().state.padding + titleHeight + getConfig().state.dividerMargin / 2).attr(\"class\", \"descr-divider\");\n  const descrBox = description.node().getBBox();\n  const width = Math.max(descrBox.width, titleBox.width);\n  descrLine.attr(\"x2\", width + 3 * getConfig().state.padding);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding).attr(\"width\", width + 2 * getConfig().state.padding).attr(\"height\", descrBox.height + titleHeight + 2 * getConfig().state.padding).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst addTitleAndBox = (g, stateDef, altBkg) => {\n  const pad = getConfig().state.padding;\n  const dblPad = 2 * getConfig().state.padding;\n  const orgBox = g.node().getBBox();\n  const orgWidth = orgBox.width;\n  const orgX = orgBox.x;\n  const title = g.append(\"text\").attr(\"x\", 0).attr(\"y\", getConfig().state.titleShift).attr(\"font-size\", getConfig().state.fontSize).attr(\"class\", \"state-title\").text(stateDef.id);\n  const titleBox = title.node().getBBox();\n  const titleWidth = titleBox.width + dblPad;\n  let width = Math.max(titleWidth, orgWidth);\n  if (width === orgWidth) {\n    width = width + dblPad;\n  }\n  let startX;\n  const graphBox = g.node().getBBox();\n  if (stateDef.doc)\n    ;\n  startX = orgX - pad;\n  if (titleWidth > orgWidth) {\n    startX = (orgWidth - width) / 2 + pad;\n  }\n  if (Math.abs(orgX - graphBox.x) < pad && titleWidth > orgWidth) {\n    startX = orgX - (titleWidth - orgWidth) / 2;\n  }\n  const lineY = 1 - getConfig().state.textHeight;\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\"y\", lineY).attr(\"class\", altBkg ? \"alt-composit\" : \"composit\").attr(\"width\", width).attr(\n    \"height\",\n    graphBox.height + getConfig().state.textHeight + getConfig().state.titleShift + 1\n  ).attr(\"rx\", \"0\");\n  title.attr(\"x\", startX + pad);\n  if (titleWidth <= orgWidth) {\n    title.attr(\"x\", orgX + (width - dblPad) / 2 - titleWidth / 2 + pad);\n  }\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", getConfig().state.textHeight * 3).attr(\"rx\", getConfig().state.radius);\n  g.insert(\"rect\", \":first-child\").attr(\"x\", startX).attr(\n    \"y\",\n    getConfig().state.titleShift - getConfig().state.textHeight - getConfig().state.padding\n  ).attr(\"width\", width).attr(\"height\", graphBox.height + 3 + 2 * getConfig().state.textHeight).attr(\"rx\", getConfig().state.radius);\n  return g;\n};\nconst drawEndState = (g) => {\n  g.append(\"circle\").attr(\"class\", \"end-state-outer\").attr(\"r\", getConfig().state.sizeUnit + getConfig().state.miniPadding).attr(\n    \"cx\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  ).attr(\n    \"cy\",\n    getConfig().state.padding + getConfig().state.sizeUnit + getConfig().state.miniPadding\n  );\n  return g.append(\"circle\").attr(\"class\", \"end-state-inner\").attr(\"r\", getConfig().state.sizeUnit).attr(\"cx\", getConfig().state.padding + getConfig().state.sizeUnit + 2).attr(\"cy\", getConfig().state.padding + getConfig().state.sizeUnit + 2);\n};\nconst drawForkJoinState = (g, stateDef) => {\n  let width = getConfig().state.forkWidth;\n  let height = getConfig().state.forkHeight;\n  if (stateDef.parentId) {\n    let tmp = width;\n    width = height;\n    height = tmp;\n  }\n  return g.append(\"rect\").style(\"stroke\", \"black\").style(\"fill\", \"black\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", getConfig().state.padding).attr(\"y\", getConfig().state.padding);\n};\nconst _drawLongText = (_text, x, y, g) => {\n  let textHeight = 0;\n  const textElem = g.append(\"text\");\n  textElem.style(\"text-anchor\", \"start\");\n  textElem.attr(\"class\", \"noteText\");\n  let text = _text.replace(/\\r\\n/g, \"<br/>\");\n  text = text.replace(/\\n/g, \"<br/>\");\n  const lines = text.split(common.lineBreakRegex);\n  let tHeight = 1.25 * getConfig().state.noteMargin;\n  for (const line2 of lines) {\n    const txt = line2.trim();\n    if (txt.length > 0) {\n      const span = textElem.append(\"tspan\");\n      span.text(txt);\n      if (tHeight === 0) {\n        const textBounds = span.node().getBBox();\n        tHeight += textBounds.height;\n      }\n      textHeight += tHeight;\n      span.attr(\"x\", x + getConfig().state.noteMargin);\n      span.attr(\"y\", y + textHeight + 1.25 * getConfig().state.noteMargin);\n    }\n  }\n  return { textWidth: textElem.node().getBBox().width, textHeight };\n};\nconst drawNote = (text, g) => {\n  g.attr(\"class\", \"state-note\");\n  const note = g.append(\"rect\").attr(\"x\", 0).attr(\"y\", getConfig().state.padding);\n  const rectElem = g.append(\"g\");\n  const { textWidth, textHeight } = _drawLongText(text, 0, 0, rectElem);\n  note.attr(\"height\", textHeight + 2 * getConfig().state.noteMargin);\n  note.attr(\"width\", textWidth + getConfig().state.noteMargin * 2);\n  return note;\n};\nconst drawState = function(elem, stateDef) {\n  const id = stateDef.id;\n  const stateInfo = {\n    id,\n    label: stateDef.id,\n    width: 0,\n    height: 0\n  };\n  const g = elem.append(\"g\").attr(\"id\", id).attr(\"class\", \"stateGroup\");\n  if (stateDef.type === \"start\") {\n    drawStartState(g);\n  }\n  if (stateDef.type === \"end\") {\n    drawEndState(g);\n  }\n  if (stateDef.type === \"fork\" || stateDef.type === \"join\") {\n    drawForkJoinState(g, stateDef);\n  }\n  if (stateDef.type === \"note\") {\n    drawNote(stateDef.note.text, g);\n  }\n  if (stateDef.type === \"divider\") {\n    drawDivider(g);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length === 0) {\n    drawSimpleState(g, stateDef);\n  }\n  if (stateDef.type === \"default\" && stateDef.descriptions.length > 0) {\n    drawDescrState(g, stateDef);\n  }\n  const stateBox = g.node().getBBox();\n  stateInfo.width = stateBox.width + 2 * getConfig().state.padding;\n  stateInfo.height = stateBox.height + 2 * getConfig().state.padding;\n  idCache$1.set(id, stateInfo);\n  return stateInfo;\n};\nlet edgeCount = 0;\nconst drawEdge = function(elem, path, relation) {\n  const getRelationType = function(type) {\n    switch (type) {\n      case db.relationType.AGGREGATION:\n        return \"aggregation\";\n      case db.relationType.EXTENSION:\n        return \"extension\";\n      case db.relationType.COMPOSITION:\n        return \"composition\";\n      case db.relationType.DEPENDENCY:\n        return \"dependency\";\n    }\n  };\n  path.points = path.points.filter((p) => !Number.isNaN(p.y));\n  const lineData = path.points;\n  const lineFunction = line().x(function(d) {\n    return d.x;\n  }).y(function(d) {\n    return d.y;\n  }).curve(curveBasis);\n  const svgPath = elem.append(\"path\").attr(\"d\", lineFunction(lineData)).attr(\"id\", \"edge\" + edgeCount).attr(\"class\", \"transition\");\n  let url = \"\";\n  if (getConfig().state.arrowMarkerAbsolute) {\n    url = window.location.protocol + \"//\" + window.location.host + window.location.pathname + window.location.search;\n    url = url.replace(/\\(/g, \"\\\\(\");\n    url = url.replace(/\\)/g, \"\\\\)\");\n  }\n  svgPath.attr(\n    \"marker-end\",\n    \"url(\" + url + \"#\" + getRelationType(db.relationType.DEPENDENCY) + \"End)\"\n  );\n  if (relation.title !== void 0) {\n    const label = elem.append(\"g\").attr(\"class\", \"stateLabel\");\n    const { x, y } = utils.calcLabelPosition(path.points);\n    const rows = common.getRows(relation.title);\n    let titleHeight = 0;\n    const titleRows = [];\n    let maxWidth = 0;\n    let minX = 0;\n    for (let i = 0; i <= rows.length; i++) {\n      const title = label.append(\"text\").attr(\"text-anchor\", \"middle\").text(rows[i]).attr(\"x\", x).attr(\"y\", y + titleHeight);\n      const boundstmp = title.node().getBBox();\n      maxWidth = Math.max(maxWidth, boundstmp.width);\n      minX = Math.min(minX, boundstmp.x);\n      log.info(boundstmp.x, x, y + titleHeight);\n      if (titleHeight === 0) {\n        const titleBox = title.node().getBBox();\n        titleHeight = titleBox.height;\n        log.info(\"Title height\", titleHeight, y);\n      }\n      titleRows.push(title);\n    }\n    let boxHeight = titleHeight * rows.length;\n    if (rows.length > 1) {\n      const heightAdj = (rows.length - 1) * titleHeight * 0.5;\n      titleRows.forEach((title, i) => title.attr(\"y\", y + i * titleHeight - heightAdj));\n      boxHeight = titleHeight * rows.length;\n    }\n    const bounds = label.node().getBBox();\n    label.insert(\"rect\", \":first-child\").attr(\"class\", \"box\").attr(\"x\", x - maxWidth / 2 - getConfig().state.padding / 2).attr(\"y\", y - boxHeight / 2 - getConfig().state.padding / 2 - 3.5).attr(\"width\", maxWidth + getConfig().state.padding).attr(\"height\", boxHeight + getConfig().state.padding);\n    log.info(bounds);\n  }\n  edgeCount++;\n};\nlet conf;\nconst transformationLog = {};\nconst setConf = function() {\n};\nconst insertMarkers = function(elem) {\n  elem.append(\"defs\").append(\"marker\").attr(\"id\", \"dependencyEnd\").attr(\"refX\", 19).attr(\"refY\", 7).attr(\"markerWidth\", 20).attr(\"markerHeight\", 28).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M 19,7 L9,13 L14,7 L9,1 Z\");\n};\nconst draw = function(text, id, _version, diagObj) {\n  conf = getConfig().state;\n  const securityLevel = getConfig().securityLevel;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  log.debug(\"Rendering diagram \" + text);\n  const diagram2 = root.select(`[id='${id}']`);\n  insertMarkers(diagram2);\n  const rootDoc = diagObj.db.getRootDoc();\n  renderDoc(rootDoc, diagram2, void 0, false, root, doc, diagObj);\n  const padding = conf.padding;\n  const bounds = diagram2.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  const svgWidth = width * 1.75;\n  configureSvgSize(diagram2, height, svgWidth, conf.useMaxWidth);\n  diagram2.attr(\n    \"viewBox\",\n    `${bounds.x - conf.padding}  ${bounds.y - conf.padding} ` + width + \" \" + height\n  );\n};\nconst getLabelWidth = (text) => {\n  return text ? text.length * conf.fontSizeFactor : 1;\n};\nconst renderDoc = (doc, diagram2, parentId, altBkg, root, domDocument, diagObj) => {\n  const graph = new graphlib.Graph({\n    compound: true,\n    multigraph: true\n  });\n  let i;\n  let edgeFreeDoc = true;\n  for (i = 0; i < doc.length; i++) {\n    if (doc[i].stmt === \"relation\") {\n      edgeFreeDoc = false;\n      break;\n    }\n  }\n  if (parentId) {\n    graph.setGraph({\n      rankdir: \"LR\",\n      multigraph: true,\n      compound: true,\n      // acyclicer: 'greedy',\n      ranker: \"tight-tree\",\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      isMultiGraph: true\n      // ranksep: 5,\n      // nodesep: 1\n    });\n  } else {\n    graph.setGraph({\n      rankdir: \"TB\",\n      multigraph: true,\n      compound: true,\n      // isCompound: true,\n      // acyclicer: 'greedy',\n      // ranker: 'longest-path'\n      ranksep: edgeFreeDoc ? 1 : conf.edgeLengthFactor,\n      nodeSep: edgeFreeDoc ? 1 : 50,\n      ranker: \"tight-tree\",\n      // ranker: 'network-simplex'\n      isMultiGraph: true\n    });\n  }\n  graph.setDefaultEdgeLabel(function() {\n    return {};\n  });\n  diagObj.db.extract(doc);\n  const states = diagObj.db.getStates();\n  const relations = diagObj.db.getRelations();\n  const keys2 = Object.keys(states);\n  for (const key of keys2) {\n    const stateDef = states[key];\n    if (parentId) {\n      stateDef.parentId = parentId;\n    }\n    let node;\n    if (stateDef.doc) {\n      let sub = diagram2.append(\"g\").attr(\"id\", stateDef.id).attr(\"class\", \"stateGroup\");\n      node = renderDoc(stateDef.doc, sub, stateDef.id, !altBkg, root, domDocument, diagObj);\n      {\n        sub = addTitleAndBox(sub, stateDef, altBkg);\n        let boxBounds = sub.node().getBBox();\n        node.width = boxBounds.width;\n        node.height = boxBounds.height + conf.padding / 2;\n        transformationLog[stateDef.id] = { y: conf.compositTitleSize };\n      }\n    } else {\n      node = drawState(diagram2, stateDef);\n    }\n    if (stateDef.note) {\n      const noteDef = {\n        descriptions: [],\n        id: stateDef.id + \"-note\",\n        note: stateDef.note,\n        type: \"note\"\n      };\n      const note = drawState(diagram2, noteDef);\n      if (stateDef.note.position === \"left of\") {\n        graph.setNode(node.id + \"-note\", note);\n        graph.setNode(node.id, node);\n      } else {\n        graph.setNode(node.id, node);\n        graph.setNode(node.id + \"-note\", note);\n      }\n      graph.setParent(node.id, node.id + \"-group\");\n      graph.setParent(node.id + \"-note\", node.id + \"-group\");\n    } else {\n      graph.setNode(node.id, node);\n    }\n  }\n  log.debug(\"Count=\", graph.nodeCount(), graph);\n  let cnt = 0;\n  relations.forEach(function(relation) {\n    cnt++;\n    log.debug(\"Setting edge\", relation);\n    graph.setEdge(\n      relation.id1,\n      relation.id2,\n      {\n        relation,\n        width: getLabelWidth(relation.title),\n        height: conf.labelHeight * common.getRows(relation.title).length,\n        labelpos: \"c\"\n      },\n      \"id\" + cnt\n    );\n  });\n  layout(graph);\n  log.debug(\"Graph after layout\", graph.nodes());\n  const svgElem = diagram2.node();\n  graph.nodes().forEach(function(v) {\n    if (v !== void 0 && graph.node(v) !== void 0) {\n      log.warn(\"Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\n        \"transform\",\n        \"translate(\" + (graph.node(v).x - graph.node(v).width / 2) + \",\" + (graph.node(v).y + (transformationLog[v] ? transformationLog[v].y : 0) - graph.node(v).height / 2) + \" )\"\n      );\n      root.select(\"#\" + svgElem.id + \" #\" + v).attr(\"data-x-shift\", graph.node(v).x - graph.node(v).width / 2);\n      const dividers = domDocument.querySelectorAll(\"#\" + svgElem.id + \" #\" + v + \" .divider\");\n      dividers.forEach((divider) => {\n        const parent = divider.parentElement;\n        let pWidth = 0;\n        let pShift = 0;\n        if (parent) {\n          if (parent.parentElement) {\n            pWidth = parent.parentElement.getBBox().width;\n          }\n          pShift = parseInt(parent.getAttribute(\"data-x-shift\"), 10);\n          if (Number.isNaN(pShift)) {\n            pShift = 0;\n          }\n        }\n        divider.setAttribute(\"x1\", 0 - pShift + 8);\n        divider.setAttribute(\"x2\", pWidth - pShift - 8);\n      });\n    } else {\n      log.debug(\"No Node \" + v + \": \" + JSON.stringify(graph.node(v)));\n    }\n  });\n  let stateBox = svgElem.getBBox();\n  graph.edges().forEach(function(e) {\n    if (e !== void 0 && graph.edge(e) !== void 0) {\n      log.debug(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n      drawEdge(diagram2, graph.edge(e), graph.edge(e).relation);\n    }\n  });\n  stateBox = svgElem.getBBox();\n  const stateInfo = {\n    id: parentId ? parentId : \"root\",\n    label: parentId ? parentId : \"root\",\n    width: 0,\n    height: 0\n  };\n  stateInfo.width = stateBox.width + 2 * conf.padding;\n  stateInfo.height = stateBox.height + 2 * conf.padding;\n  log.debug(\"Doc rendered\", stateInfo, graph);\n  return stateInfo;\n};\nconst renderer = {\n  setConf,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["idCache","idCache$1","set","key","val","drawDescrState","g","stateDef","titleBox","append","attr","getConfig","state","padding","textHeight","fontSize","text","descriptions","node","getBBox","titleHeight","height","description","dividerMargin","isFirst","isSecond","forEach","descr","textEl","txt","isFirst2","tSpan","addTspan","descrLine","descrBox","width","Math","max","insert","radius","addTitleAndBox","altBkg","pad","dblPad","orgBox","orgWidth","orgX","x","title","titleShift","id","titleWidth","startX","graphBox","doc","abs","lineY","drawNote","note","rectElem","textWidth","_drawLongText","_text","y","textElem","style","replace","lines","split","common","lineBreakRegex","tHeight","noteMargin","line2","trim","length","span","drawState","elem","stateInfo","label","type","sizeUnit","drawStartState","miniPadding","drawEndState","drawForkJoinState","forkWidth","forkHeight","parentId","tmp","drawDivider","drawSimpleState","classBox","stateBox","edgeCount","conf","transformationLog","renderDoc","diagram2","root","domDocument","diagObj","graph","graphlib","compound","multigraph","i","edgeFreeDoc","stmt","setGraph","rankdir","ranker","ranksep","edgeLengthFactor","nodeSep","isMultiGraph","setDefaultEdgeLabel","db","extract","states","getStates","relations","getRelations","keys2","Object","keys","sub","boxBounds","compositTitleSize","noteDef","position","setNode","setParent","log","debug","nodeCount","cnt","relation","setEdge","id1","id2","fontSizeFactor","labelHeight","getRows","labelpos","layout","nodes","svgElem","v","warn","JSON","stringify","select","querySelectorAll","divider","parent","parentElement","pWidth","pShift","parseInt","getAttribute","Number","isNaN","setAttribute","edges","e","edge","w","path","points","filter","p","lineData","lineFunction","line","d","curve","curveBasis","svgPath","url","arrowMarkerAbsolute","window","location","protocol","host","pathname","search","relationType","AGGREGATION","EXTENSION","COMPOSITION","DEPENDENCY","getRelationType","utils","calcLabelPosition","rows","titleRows","maxWidth","minX","boundstmp","min","info","push","boxHeight","heightAdj","bounds","drawEdge","renderer","setConf","draw","_version","securityLevel","sandboxElement","contentDocument","body","document","concat","rootDoc","getRootDoc","svgWidth","configureSvgSize","useMaxWidth","diagram","parser","styles","init","cnf","clear"],"sourceRoot":""}