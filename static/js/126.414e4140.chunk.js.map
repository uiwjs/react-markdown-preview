{"version":3,"file":"static/js/126.414e4140.chunk.js","mappings":"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","sources":["../../node_modules/dagre-d3-es/src/graphlib/json.js","../../node_modules/lodash-es/clone.js","../../node_modules/mermaid/dist/index-fc10efb0.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, g as getSubGraphTitleMargins, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, h as insertEdge, j as positionEdgeLabel } from \"./edges-d32062c0.js\";\nimport { l as log, c as getConfig, m as evaluate } from \"./mermaid-f47111a7.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-6b48ae7d.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancestorId) => {\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", descendants[ancestorId].includes(id));\n  if (descendants[ancestorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Descendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Descendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of Object.keys(clusterDb)) {\n    const nonClusterChild = clusterDb[id].id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb[parent] && !clusterDb[parent].externalConnections) {\n      clusterDb[id].id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb[parent].externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb[parent].externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 - node.padding / 3 + (evaluate(siteConfig.flowchart.htmlLabels) ? 5 : 3) + subGraphTitleTopMargin})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  const { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        node.height += subGraphTitleTotalMargin;\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        node.y += subGraphTitleTotalMargin / 2;\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramType, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramType, id) => {\n  insertMarkers(elem, markers, diagramType, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(elem, graph, diagramType, id, void 0, siteConfig);\n};\nexport {\n  render as r\n};\n"],"names":["write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","value","v","nodeValue","node","parent","e","edgeValue","edge","w","name","baseClone","clusterDb","descendants","parents","isDescendant","id","ancestorId","log","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","graphlibJson","hasChildren","dir","rankdir","clusterData","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","siteConfig","getConfig","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","flowchart","htmlLabels","label","text","labelType","createText","style","labelStyle","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","subGraphTitleTopMargin","getSubGraphTitleMargins","concat","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramType","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","subGraphTitleTotalMargin","sortNodesByHierarchy","positionNode","insertCluster","shape","points","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3","adjustClustersAndEdges","keys","nonClusterChild","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster"],"sourceRoot":""}