{"version":3,"file":"static/js/807.a41a0b9d.chunk.js","mappings":"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","sources":["../../node_modules/dagre-d3-es/src/graphlib/json.js","../../node_modules/mermaid/dist/index-3862675e.js","../../node_modules/lodash-es/clone.js"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, g as getSubGraphTitleMargins, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, h as insertEdge, j as positionEdgeLabel } from \"./edges-e0da2a9e.js\";\nimport { l as log, c as getConfig, m as evaluate } from \"./mermaid-b5860b54.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-2e5e7dd3.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancestorId) => {\n  log.trace(\"In isDescendant\", ancestorId, \" \", id, \" = \", descendants[ancestorId].includes(id));\n  if (descendants[ancestorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Descendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in descendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Descendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  for (let id of Object.keys(clusterDb)) {\n    const nonClusterChild = clusterDb[id].id;\n    const parent = graph.parent(nonClusterChild);\n    if (parent !== id && clusterDb[parent] && !clusterDb[parent].externalConnections) {\n      clusterDb[id].id = parent;\n    }\n  }\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        const parent = graph.parent(v);\n        clusterDb[parent].externalConnections = true;\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        const parent = graph.parent(w);\n        clusterDb[parent].externalConnections = true;\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(siteConfig.flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the label on top of the box instead of inside it\n      `translate(${node.x}, ${node.y - node.height / 2 + subGraphTitleTopMargin})`\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const siteConfig = getConfig();\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(siteConfig.flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  const { subGraphTitleTopMargin } = getSubGraphTitleMargins(siteConfig);\n  label.attr(\n    \"transform\",\n    `translate(${node.x - bbox.width / 2}, ${node.y - node.height / 2 - node.padding / 3 + (evaluate(siteConfig.flowchart.htmlLabels) ? 5 : 3) + subGraphTitleTopMargin})`\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramType, id, parentCluster, siteConfig) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(\n          nodes,\n          node.graph,\n          diagramType,\n          id,\n          graph.node(v),\n          siteConfig\n        );\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translating: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  const { subGraphTitleTotalMargin } = getSubGraphTitleMargins(siteConfig);\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      node.y += subGraphTitleTotalMargin;\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        node.height += subGraphTitleTotalMargin;\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        node.y += subGraphTitleTotalMargin / 2;\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    edge.points.forEach((point) => point.y += subGraphTitleTotalMargin / 2);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramType, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramType, id) => {\n  insertMarkers(elem, markers, diagramType, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  const siteConfig = getConfig();\n  await recursiveRender(elem, graph, diagramType, id, void 0, siteConfig);\n};\nexport {\n  render as r\n};\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n"],"names":["write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","value","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancestorId","log","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","graphlibJson","hasChildren","dir","rankdir","clusterData","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","siteConfig","getConfig","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","flowchart","htmlLabels","label","text","labelType","createText","style","labelStyle","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","subGraphTitleTopMargin","getSubGraphTitleMargins","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramType","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","subGraphTitleTotalMargin","sortNodesByHierarchy","positionNode","insertCluster","shape","points","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3","adjustClustersAndEdges","keys","nonClusterChild","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster","baseClone"],"sourceRoot":""}