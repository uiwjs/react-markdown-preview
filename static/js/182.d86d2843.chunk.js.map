{"version":3,"file":"static/js/182.d86d2843.chunk.js","mappings":"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","sources":["../../node_modules/lodash-es/clone.js","../../node_modules/dagre-d3-es/src/graphlib/json.js","../../node_modules/mermaid/dist/index-67a42d7d.js"],"sourcesContent":["import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import * as _ from 'lodash-es';\nimport { Graph } from './graph.js';\n\nexport { write, read };\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound(),\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g),\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function (e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function (entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","import { layout } from \"dagre-d3-es/src/dagre/index.js\";\nimport * as graphlibJson from \"dagre-d3-es/src/graphlib/json.js\";\nimport { c as createLabel, i as intersectRect, a as insertMarkers, b as clear$2, d as clear$3, u as updateNodeBounds, s as setNodeElem, e as insertNode, f as insertEdgeLabel, p as positionNode, g as insertEdge, h as positionEdgeLabel } from \"./edges-80f1ebb6.js\";\nimport { l as log, m as evaluate, c as getConfig } from \"./mermaid-934d9bea.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { a as createText } from \"./createText-aebacdfe.js\";\nimport { select } from \"d3\";\nlet clusterDb = {};\nlet descendants = {};\nlet parents = {};\nconst clear$1 = () => {\n  descendants = {};\n  parents = {};\n  clusterDb = {};\n};\nconst isDescendant = (id, ancenstorId) => {\n  log.trace(\"In isDecendant\", ancenstorId, \" \", id, \" = \", descendants[ancenstorId].includes(id));\n  if (descendants[ancenstorId].includes(id)) {\n    return true;\n  }\n  return false;\n};\nconst edgeInCluster = (edge, clusterId) => {\n  log.info(\"Decendants of \", clusterId, \" is \", descendants[clusterId]);\n  log.info(\"Edge is \", edge);\n  if (edge.v === clusterId) {\n    return false;\n  }\n  if (edge.w === clusterId) {\n    return false;\n  }\n  if (!descendants[clusterId]) {\n    log.debug(\"Tilt, \", clusterId, \",not in decendants\");\n    return false;\n  }\n  return descendants[clusterId].includes(edge.v) || isDescendant(edge.v, clusterId) || isDescendant(edge.w, clusterId) || descendants[clusterId].includes(edge.w);\n};\nconst copy = (clusterId, graph, newGraph, rootId) => {\n  log.warn(\n    \"Copying children of \",\n    clusterId,\n    \"root\",\n    rootId,\n    \"data\",\n    graph.node(clusterId),\n    rootId\n  );\n  const nodes = graph.children(clusterId) || [];\n  if (clusterId !== rootId) {\n    nodes.push(clusterId);\n  }\n  log.warn(\"Copying (nodes) clusterId\", clusterId, \"nodes\", nodes);\n  nodes.forEach((node) => {\n    if (graph.children(node).length > 0) {\n      copy(node, graph, newGraph, rootId);\n    } else {\n      const data = graph.node(node);\n      log.info(\"cp \", node, \" to \", rootId, \" with parent \", clusterId);\n      newGraph.setNode(node, data);\n      if (rootId !== graph.parent(node)) {\n        log.warn(\"Setting parent\", node, graph.parent(node));\n        newGraph.setParent(node, graph.parent(node));\n      }\n      if (clusterId !== rootId && node !== clusterId) {\n        log.debug(\"Setting parent\", node, clusterId);\n        newGraph.setParent(node, clusterId);\n      } else {\n        log.info(\"In copy \", clusterId, \"root\", rootId, \"data\", graph.node(clusterId), rootId);\n        log.debug(\n          \"Not Setting parent for node=\",\n          node,\n          \"cluster!==rootId\",\n          clusterId !== rootId,\n          \"node!==clusterId\",\n          node !== clusterId\n        );\n      }\n      const edges = graph.edges(node);\n      log.debug(\"Copying Edges\", edges);\n      edges.forEach((edge) => {\n        log.info(\"Edge\", edge);\n        const data2 = graph.edge(edge.v, edge.w, edge.name);\n        log.info(\"Edge data\", data2, rootId);\n        try {\n          if (edgeInCluster(edge, rootId)) {\n            log.info(\"Copying as \", edge.v, edge.w, data2, edge.name);\n            newGraph.setEdge(edge.v, edge.w, data2, edge.name);\n            log.info(\"newGraph edges \", newGraph.edges(), newGraph.edge(newGraph.edges()[0]));\n          } else {\n            log.info(\n              \"Skipping copy of edge \",\n              edge.v,\n              \"-->\",\n              edge.w,\n              \" rootId: \",\n              rootId,\n              \" clusterId:\",\n              clusterId\n            );\n          }\n        } catch (e) {\n          log.error(e);\n        }\n      });\n    }\n    log.debug(\"Removing node\", node);\n    graph.removeNode(node);\n  });\n};\nconst extractDescendants = (id, graph) => {\n  const children = graph.children(id);\n  let res = [...children];\n  for (const child of children) {\n    parents[child] = id;\n    res = [...res, ...extractDescendants(child, graph)];\n  }\n  return res;\n};\nconst findNonClusterChild = (id, graph) => {\n  log.trace(\"Searching\", id);\n  const children = graph.children(id);\n  log.trace(\"Searching children of id \", id, children);\n  if (children.length < 1) {\n    log.trace(\"This is a valid node\", id);\n    return id;\n  }\n  for (const child of children) {\n    const _id = findNonClusterChild(child, graph);\n    if (_id) {\n      log.trace(\"Found replacement for\", id, \" => \", _id);\n      return _id;\n    }\n  }\n};\nconst getAnchorId = (id) => {\n  if (!clusterDb[id]) {\n    return id;\n  }\n  if (!clusterDb[id].externalConnections) {\n    return id;\n  }\n  if (clusterDb[id]) {\n    return clusterDb[id].id;\n  }\n  return id;\n};\nconst adjustClustersAndEdges = (graph, depth) => {\n  if (!graph || depth > 10) {\n    log.debug(\"Opting out, no graph \");\n    return;\n  } else {\n    log.debug(\"Opting in, graph \");\n  }\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    if (children.length > 0) {\n      log.warn(\n        \"Cluster identified\",\n        id,\n        \" Replacement id in edges: \",\n        findNonClusterChild(id, graph)\n      );\n      descendants[id] = extractDescendants(id, graph);\n      clusterDb[id] = { id: findNonClusterChild(id, graph), clusterData: graph.node(id) };\n    }\n  });\n  graph.nodes().forEach(function(id) {\n    const children = graph.children(id);\n    const edges = graph.edges();\n    if (children.length > 0) {\n      log.debug(\"Cluster identified\", id, descendants);\n      edges.forEach((edge) => {\n        if (edge.v !== id && edge.w !== id) {\n          const d1 = isDescendant(edge.v, id);\n          const d2 = isDescendant(edge.w, id);\n          if (d1 ^ d2) {\n            log.warn(\"Edge: \", edge, \" leaves cluster \", id);\n            log.warn(\"Decendants of XXX \", id, \": \", descendants[id]);\n            clusterDb[id].externalConnections = true;\n          }\n        }\n      });\n    } else {\n      log.debug(\"Not a cluster \", id, descendants);\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.warn(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(graph.edge(e)));\n    let v = e.v;\n    let w = e.w;\n    log.warn(\n      \"Fix XXX\",\n      clusterDb,\n      \"ids:\",\n      e.v,\n      e.w,\n      \"Translating: \",\n      clusterDb[e.v],\n      \" --- \",\n      clusterDb[e.w]\n    );\n    if (clusterDb[e.v] && clusterDb[e.w] && clusterDb[e.v] === clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing link to self - removing XXX\", e.v, e.w, e.name);\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      const specialId = e.w + \"---\" + e.v;\n      graph.setNode(specialId, {\n        domId: specialId,\n        id: specialId,\n        labelStyle: \"\",\n        labelText: edge.label,\n        padding: 0,\n        shape: \"labelRect\",\n        style: \"\"\n      });\n      const edge1 = structuredClone(edge);\n      const edge2 = structuredClone(edge);\n      edge1.label = \"\";\n      edge1.arrowTypeEnd = \"none\";\n      edge2.label = \"\";\n      edge1.fromCluster = e.v;\n      edge2.toCluster = e.v;\n      graph.setEdge(v, specialId, edge1, e.name + \"-cyclic-special\");\n      graph.setEdge(specialId, w, edge2, e.name + \"-cyclic-special\");\n    } else if (clusterDb[e.v] || clusterDb[e.w]) {\n      log.warn(\"Fixing and trixing - removing XXX\", e.v, e.w, e.name);\n      v = getAnchorId(e.v);\n      w = getAnchorId(e.w);\n      graph.removeEdge(e.v, e.w, e.name);\n      if (v !== e.v) {\n        edge.fromCluster = e.v;\n      }\n      if (w !== e.w) {\n        edge.toCluster = e.w;\n      }\n      log.warn(\"Fix Replacing with XXX\", v, w, e.name);\n      graph.setEdge(v, w, edge, e.name);\n    }\n  });\n  log.warn(\"Adjusted Graph\", graphlibJson.write(graph));\n  extractor(graph, 0);\n  log.trace(clusterDb);\n};\nconst extractor = (graph, depth) => {\n  log.warn(\"extractor - \", depth, graphlibJson.write(graph), graph.children(\"D\"));\n  if (depth > 10) {\n    log.error(\"Bailing out\");\n    return;\n  }\n  let nodes = graph.nodes();\n  let hasChildren = false;\n  for (const node of nodes) {\n    const children = graph.children(node);\n    hasChildren = hasChildren || children.length > 0;\n  }\n  if (!hasChildren) {\n    log.debug(\"Done, no node has children\", graph.nodes());\n    return;\n  }\n  log.debug(\"Nodes = \", nodes, depth);\n  for (const node of nodes) {\n    log.debug(\n      \"Extracting node\",\n      node,\n      clusterDb,\n      clusterDb[node] && !clusterDb[node].externalConnections,\n      !graph.parent(node),\n      graph.node(node),\n      graph.children(\"D\"),\n      \" Depth \",\n      depth\n    );\n    if (!clusterDb[node]) {\n      log.debug(\"Not a cluster\", node, depth);\n    } else if (!clusterDb[node].externalConnections && // !graph.parent(node) &&\n    graph.children(node) && graph.children(node).length > 0) {\n      log.warn(\n        \"Cluster without external connections, without a parent and with children\",\n        node,\n        depth\n      );\n      const graphSettings = graph.graph();\n      let dir = graphSettings.rankdir === \"TB\" ? \"LR\" : \"TB\";\n      if (clusterDb[node] && clusterDb[node].clusterData && clusterDb[node].clusterData.dir) {\n        dir = clusterDb[node].clusterData.dir;\n        log.warn(\"Fixing dir\", clusterDb[node].clusterData.dir, dir);\n      }\n      const clusterGraph = new graphlib.Graph({\n        multigraph: true,\n        compound: true\n      }).setGraph({\n        rankdir: dir,\n        // Todo: set proper spacing\n        nodesep: 50,\n        ranksep: 50,\n        marginx: 8,\n        marginy: 8\n      }).setDefaultEdgeLabel(function() {\n        return {};\n      });\n      log.warn(\"Old graph before copy\", graphlibJson.write(graph));\n      copy(node, graph, clusterGraph, node);\n      graph.setNode(node, {\n        clusterNode: true,\n        id: node,\n        clusterData: clusterDb[node].clusterData,\n        labelText: clusterDb[node].labelText,\n        graph: clusterGraph\n      });\n      log.warn(\"New graph after copy node: (\", node, \")\", graphlibJson.write(clusterGraph));\n      log.debug(\"Old graph after copy\", graphlibJson.write(graph));\n    } else {\n      log.warn(\n        \"Cluster ** \",\n        node,\n        \" **not meeting the criteria !externalConnections:\",\n        !clusterDb[node].externalConnections,\n        \" no parent: \",\n        !graph.parent(node),\n        \" children \",\n        graph.children(node) && graph.children(node).length > 0,\n        graph.children(\"D\"),\n        depth\n      );\n      log.debug(clusterDb);\n    }\n  }\n  nodes = graph.nodes();\n  log.warn(\"New list of nodes\", nodes);\n  for (const node of nodes) {\n    const data = graph.node(node);\n    log.warn(\" Now next level\", node, data);\n    if (data.clusterNode) {\n      extractor(data.graph, depth + 1);\n    }\n  }\n};\nconst sorter = (graph, nodes) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n  let result = Object.assign(nodes);\n  nodes.forEach((node) => {\n    const children = graph.children(node);\n    const sorted = sorter(graph, children);\n    result = [...result, ...sorted];\n  });\n  return result;\n};\nconst sortNodesByHierarchy = (graph) => sorter(graph, graph.children());\nconst rect = (parent, node) => {\n  log.info(\"Creating subgraph rect for \", node.id, node);\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"cluster\" + (node.class ? \" \" + node.class : \"\")).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const useHtmlLabels = evaluate(getConfig().flowchart.htmlLabels);\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const text = node.labelType === \"markdown\" ? createText(label, node.labelText, { style: node.labelStyle, useHtmlLabels }) : label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + padding ? bbox.width + padding : node.width;\n  if (node.width <= bbox.width + padding) {\n    node.diff = (bbox.width - node.width) / 2 - node.padding / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  log.trace(\"Data \", node, JSON.stringify(node));\n  rect2.attr(\"style\", node.style).attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - width / 2).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width).attr(\"height\", node.height + padding);\n  if (useHtmlLabels) {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  } else {\n    label.attr(\n      \"transform\",\n      // This puts the labal on top of the box instead of inside it\n      \"translate(\" + node.x + \", \" + (node.y - node.height / 2) + \")\"\n    );\n  }\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst noteGroup = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", \"note-cluster\").attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding).attr(\"fill\", \"none\");\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst roundedWithTitle = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const label = shapeSvg.insert(\"g\").attr(\"class\", \"cluster-label\");\n  const innerRect = shapeSvg.append(\"rect\");\n  const text = label.node().appendChild(createLabel(node.labelText, node.labelStyle, void 0, true));\n  let bbox = text.getBBox();\n  if (evaluate(getConfig().flowchart.htmlLabels)) {\n    const div = text.children[0];\n    const dv = select(text);\n    bbox = div.getBoundingClientRect();\n    dv.attr(\"width\", bbox.width);\n    dv.attr(\"height\", bbox.height);\n  }\n  bbox = text.getBBox();\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  const width = node.width <= bbox.width + node.padding ? bbox.width + node.padding : node.width;\n  if (node.width <= bbox.width + node.padding) {\n    node.diff = (bbox.width + node.padding * 0 - node.width) / 2;\n  } else {\n    node.diff = -node.padding / 2;\n  }\n  rect2.attr(\"class\", \"outer\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding).attr(\"width\", width + padding).attr(\"height\", node.height + padding);\n  innerRect.attr(\"class\", \"inner\").attr(\"x\", node.x - width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2 - halfPadding + bbox.height - 1).attr(\"width\", width + padding).attr(\"height\", node.height + padding - bbox.height - 3);\n  label.attr(\n    \"transform\",\n    \"translate(\" + (node.x - bbox.width / 2) + \", \" + (node.y - node.height / 2 - node.padding / 3 + (evaluate(getConfig().flowchart.htmlLabels) ? 5 : 3)) + \")\"\n  );\n  const rectBox = rect2.node().getBBox();\n  node.height = rectBox.height;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst divider = (parent, node) => {\n  const shapeSvg = parent.insert(\"g\").attr(\"class\", node.classes).attr(\"id\", node.id);\n  const rect2 = shapeSvg.insert(\"rect\", \":first-child\");\n  const padding = 0 * node.padding;\n  const halfPadding = padding / 2;\n  rect2.attr(\"class\", \"divider\").attr(\"x\", node.x - node.width / 2 - halfPadding).attr(\"y\", node.y - node.height / 2).attr(\"width\", node.width + padding).attr(\"height\", node.height + padding);\n  const rectBox = rect2.node().getBBox();\n  node.width = rectBox.width;\n  node.height = rectBox.height;\n  node.diff = -node.padding / 2;\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n};\nconst shapes = { rect, roundedWithTitle, noteGroup, divider };\nlet clusterElems = {};\nconst insertCluster = (elem, node) => {\n  log.trace(\"Inserting cluster\");\n  const shape = node.shape || \"rect\";\n  clusterElems[node.id] = shapes[shape](elem, node);\n};\nconst clear = () => {\n  clusterElems = {};\n};\nconst recursiveRender = async (_elem, graph, diagramtype, id, parentCluster) => {\n  log.info(\"Graph in recursive render: XXX\", graphlibJson.write(graph), parentCluster);\n  const dir = graph.graph().rankdir;\n  log.trace(\"Dir in recursive render - dir:\", dir);\n  const elem = _elem.insert(\"g\").attr(\"class\", \"root\");\n  if (!graph.nodes()) {\n    log.info(\"No nodes found for\", graph);\n  } else {\n    log.info(\"Recursive render XXX\", graph.nodes());\n  }\n  if (graph.edges().length > 0) {\n    log.trace(\"Recursive edges\", graph.edge(graph.edges()[0]));\n  }\n  const clusters = elem.insert(\"g\").attr(\"class\", \"clusters\");\n  const edgePaths = elem.insert(\"g\").attr(\"class\", \"edgePaths\");\n  const edgeLabels = elem.insert(\"g\").attr(\"class\", \"edgeLabels\");\n  const nodes = elem.insert(\"g\").attr(\"class\", \"nodes\");\n  await Promise.all(\n    graph.nodes().map(async function(v) {\n      const node = graph.node(v);\n      if (parentCluster !== void 0) {\n        const data = JSON.parse(JSON.stringify(parentCluster.clusterData));\n        log.info(\"Setting data for cluster XXX (\", v, \") \", data, parentCluster);\n        graph.setNode(parentCluster.id, data);\n        if (!graph.parent(v)) {\n          log.trace(\"Setting parent\", v, parentCluster.id);\n          graph.setParent(v, parentCluster.id, data);\n        }\n      }\n      log.info(\"(Insert) Node XXX\" + v + \": \" + JSON.stringify(graph.node(v)));\n      if (node && node.clusterNode) {\n        log.info(\"Cluster identified\", v, node.width, graph.node(v));\n        const o = await recursiveRender(nodes, node.graph, diagramtype, id, graph.node(v));\n        const newEl = o.elem;\n        updateNodeBounds(node, newEl);\n        node.diff = o.diff || 0;\n        log.info(\"Node bounds (abc123)\", v, node, node.width, node.x, node.y);\n        setNodeElem(newEl, node);\n        log.warn(\"Recursive render complete \", newEl, node);\n      } else {\n        if (graph.children(v).length > 0) {\n          log.info(\"Cluster - the non recursive path XXX\", v, node.id, node, graph);\n          log.info(findNonClusterChild(node.id, graph));\n          clusterDb[node.id] = { id: findNonClusterChild(node.id, graph), node };\n        } else {\n          log.info(\"Node - the non recursive path\", v, node.id, node);\n          await insertNode(nodes, graph.node(v), dir);\n        }\n      }\n    })\n  );\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e.v, e.w, e.name);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \", e, \" \", JSON.stringify(graph.edge(e)));\n    log.info(\"Fix\", clusterDb, \"ids:\", e.v, e.w, \"Translateing: \", clusterDb[e.v], clusterDb[e.w]);\n    insertEdgeLabel(edgeLabels, edge);\n  });\n  graph.edges().forEach(function(e) {\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(e));\n  });\n  log.info(\"#############################################\");\n  log.info(\"###                Layout                 ###\");\n  log.info(\"#############################################\");\n  log.info(graph);\n  layout(graph);\n  log.info(\"Graph after layout:\", graphlibJson.write(graph));\n  let diff = 0;\n  sortNodesByHierarchy(graph).forEach(function(v) {\n    const node = graph.node(v);\n    log.info(\"Position \" + v + \": \" + JSON.stringify(graph.node(v)));\n    log.info(\n      \"Position \" + v + \": (\" + node.x,\n      \",\" + node.y,\n      \") width: \",\n      node.width,\n      \" height: \",\n      node.height\n    );\n    if (node && node.clusterNode) {\n      positionNode(node);\n    } else {\n      if (graph.children(v).length > 0) {\n        insertCluster(clusters, node);\n        clusterDb[node.id].node = node;\n      } else {\n        positionNode(node);\n      }\n    }\n  });\n  graph.edges().forEach(function(e) {\n    const edge = graph.edge(e);\n    log.info(\"Edge \" + e.v + \" -> \" + e.w + \": \" + JSON.stringify(edge), edge);\n    const paths = insertEdge(edgePaths, e, edge, clusterDb, diagramtype, graph, id);\n    positionEdgeLabel(edge, paths);\n  });\n  graph.nodes().forEach(function(v) {\n    const n = graph.node(v);\n    log.info(v, n.type, n.diff);\n    if (n.type === \"group\") {\n      diff = n.diff;\n    }\n  });\n  return { elem, diff };\n};\nconst render = async (elem, graph, markers, diagramtype, id) => {\n  insertMarkers(elem, markers, diagramtype, id);\n  clear$2();\n  clear$3();\n  clear();\n  clear$1();\n  log.warn(\"Graph at first:\", JSON.stringify(graphlibJson.write(graph)));\n  adjustClustersAndEdges(graph);\n  log.warn(\"Graph after:\", JSON.stringify(graphlibJson.write(graph)));\n  await recursiveRender(elem, graph, diagramtype, id);\n};\nexport {\n  render as r\n};\n"],"names":["value","baseClone","write","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","_","graph","v","nodeValue","node","parent","e","edgeValue","edge","w","name","clusterDb","descendants","parents","isDescendant","id","ancenstorId","log","trace","includes","copy","clusterId","newGraph","rootId","warn","children","push","forEach","length","data","info","setNode","setParent","debug","data2","edgeInCluster","setEdge","error","removeNode","extractDescendants","res","child","findNonClusterChild","_id","getAnchorId","externalConnections","extractor","depth","graphlibJson","hasChildren","dir","rankdir","clusterData","clusterGraph","graphlib","setGraph","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","clusterNode","labelText","sorter","result","Object","assign","sorted","shapes","rect","shapeSvg","insert","attr","class","rect2","useHtmlLabels","evaluate","getConfig","flowchart","htmlLabels","label","text","labelType","createText","style","labelStyle","appendChild","createLabel","bbox","getBBox","div","dv","select","getBoundingClientRect","width","height","padding","halfPadding","diff","JSON","stringify","rx","ry","x","y","rectBox","intersect","point","intersectRect","roundedWithTitle","classes","innerRect","append","noteGroup","divider","clusterElems","recursiveRender","async","_elem","diagramtype","parentCluster","elem","clusters","edgePaths","edgeLabels","Promise","all","map","parse","o","newEl","updateNodeBounds","setNodeElem","insertNode","insertEdgeLabel","layout","sortNodesByHierarchy","positionNode","insertCluster","shape","paths","insertEdge","positionEdgeLabel","n","type","render","markers","insertMarkers","clear$2","clear$3","adjustClustersAndEdges","removeEdge","specialId","domId","edge1","structuredClone","edge2","arrowTypeEnd","fromCluster","toCluster"],"sourceRoot":""}